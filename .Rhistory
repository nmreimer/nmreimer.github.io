this.on('baselayerchange', el => updateLegend());
}"
) # JS from https://gis.stackexchange.com/questions/342090/cannot-bind-legend-layer-to-polygon-layer-in-leaflet-r
mapdata <- wide_merged_data %>% filter(!is.na(gradecenter)&!is.na(gcs_mn_avg_ol)) %>%
mutate(diff_from_gradecenter = gcs_mn_avg_ol - gradecenter, pp_total_raw = as.numeric(pp_total_raw)) %>%
mutate(Longitude = as.numeric(Longitude), Latitude = as.numeric(Latitude))
p1 <- colorNumeric(
palette = met.brewer(palname)[1:10],
domain = mapdata$diff_from_gradecenter
)
pal <- colorNumeric(
palette = met.brewer(palname)[1:10],
domain = c(8000,24000)
)
leaflet(mapdata) %>% addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(
color = ~pal(scales::oob_squish(pp_total_raw, range = c(8000,24000))),
radius = ~(as.numeric(ncesenroll)/400),
popup = ~paste0(School,
"<br>Grade Distance from National Average: ", round(diff_from_gradecenter, digits = 3),
"<br>Per Pupil Funding: ", pp_total_raw
),
stroke = ~ifelse(!is.na(pp_total_raw), TRUE, FALSE),
group = "Funding"
) %>%
addLegend(pal = pal, values = 8000:24000, group = "Funding", className = "info legend Funding") %>%
addCircleMarkers(
color = ~p1(diff_from_gradecenter),
radius = ~(as.numeric(ncesenroll)/400),
popup = ~paste0(School,
"<br>Grade Distance from National Average: ", round(diff_from_gradecenter, digits = 3),
"<br>Per Pupil Funding: ", pp_total_raw
),
group = "Performance"
) %>%
addLegend(pal = p1, values = 6:-6, group = "Performance", className = "info legend Performance") %>%
addLayersControl(
baseGroups = c("Funding", "Performance"),
position = "topleft"
) %>%
htmlwidgets::onRender("
function(el, x) {
var updateLegend = function () {
var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);
document.querySelectorAll('.legend').forEach(a => a.hidden=true);
document.querySelectorAll('.legend').forEach(l => {
if (l.classList.contains(selectedGroup)) l.hidden=false;
});
};
updateLegend();
this.on('baselayerchange', el => updateLegend());
}"
) # JS from https://gis.stackexchange.com/questions/342090/cannot-bind-legend-layer-to-polygon-layer-in-leaflet-r
grade_diff_by_county_with_breaks_geo <- grade_diff_by_county_geo %>%
mutate(grade_diff_cat = factor(cut(mean_gcs_diff, breaks=c(-2, -1, 0, 1, 2))))
pal <- colorFactor(
palette = met.brewer(palname,3)[1:3],
domain = grade_diff_by_county_with_breaks_geo$grade_diff_cat
)
leaflet(grade_diff_by_county_with_breaks_geo) %>%
addPolygons(
fillColor = ~pal(grade_diff_cat),
opacity = .25,
color = "white",
fillOpacity = .5,
group = "County"
)  %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLayersControl(
baseGroups = "County",
position = "topright"
) %>%
addLegend(colors = met.brewer(palname,3)[1:3], values = ~grade_diff_cat, title = NULL, labels = c('1-2 grades lower than national average', 'Less than 1 grade lower than average', '0-1 grade higher than national average'), className = "info legend County")
# Step 1:
all_data <- read.csv('https://raw.githubusercontent.com/JeremyHub/STAT-456-Final/main/Jeremy/train.csv') # characteristics of homes sold in an Iowa town between 2006 and 2010. Compiled specifically for use in data science education.
# Step 2:
train <- all_data[,sapply(all_data, is.numeric)] %>%
sapply(function(x) (x - min(x)) / (max(x) - min(x))) %>% # applies the function to perform min-max scaling
as.data.frame() %>%
select(-LotFrontage,-MasVnrArea,-GarageYrBlt) %>%
na.omit()
sample_size = 500
picked = sample(seq_len(nrow(train)),size = sample_size)
train =train[picked,]
test =train[-picked,]
model = neuralnet(SalePrice ~ LotArea + OverallQual,
data=train,
hidden=c(4,2),
linear.output = TRUE
)
plot(model,rep = "best")
pred <- predict(model, test)
diff <- cbind(pred, test) %>%
mutate(diff = pred-SalePrice) %>%
summarize(mean_diff=mean(diff))
diff
diff$mean * (max(all_data$SalePrice) - min(all_data$SalePrice)) + min(all_data$SalePrice)
palname = "Johnson"
defaultcolor = met.brewer(palname,10)[9]
pal <- colorFactor(
palette = met.brewer(palname,3)[1:3],
domain = grade_diff_by_county_with_breaks_geo$grade_diff_cat
)
leaflet(grade_diff_by_county_with_breaks_geo) %>%
addPolygons(
fillColor = ~pal(grade_diff_cat),
opacity = .25,
color = "white",
fillOpacity = .5,
group = "Performance"
)  %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLayersControl(
baseGroups = "Performance",
position = "topright"
) %>%
addLegend(colors = met.brewer(palname,3)[1:3], values = ~grade_diff_cat, title = NULL, labels = c('1-2 grades lower than national average', 'Less than 1 grade lower than average', '0-1 grade higher than national average'), className = "info legend Performance")
mapdata <- wide_merged_data %>% filter(!is.na(gradecenter)&!is.na(gcs_mn_avg_ol)) %>%
mutate(diff_from_gradecenter = gcs_mn_avg_ol - gradecenter, pp_total_raw = as.numeric(pp_total_raw)) %>%
mutate(Longitude = as.numeric(Longitude), Latitude = as.numeric(Latitude))
p1 <- colorNumeric(
palette = met.brewer(palname)[1:10],
domain = mapdata$diff_from_gradecenter
)
pal <- colorNumeric(
palette = met.brewer(palname)[1:10],
domain = c(8000,24000)
)
leaflet(mapdata) %>% addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(
color = ~pal(scales::oob_squish(pp_total_raw, range = c(8000,24000))),
radius = ~(as.numeric(ncesenroll)/400),
popup = ~paste0(School,
"<br>Grade Distance from National Average: ", round(diff_from_gradecenter, digits = 3),
"<br>Per Pupil Funding: ", pp_total_raw
),
stroke = ~ifelse(!is.na(pp_total_raw), TRUE, FALSE),
group = "Funding"
) %>%
addLegend(pal = pal, values = 8000:24000, group = "Funding", className = "info legend Funding") %>%
addCircleMarkers(
color = ~p1(diff_from_gradecenter),
radius = ~(as.numeric(ncesenroll)/400),
popup = ~paste0(School,
"<br>Grade Distance from National Average: ", round(diff_from_gradecenter, digits = 3),
"<br>Per Pupil Funding: ", pp_total_raw
),
group = "Performance"
) %>%
addLegend(pal = p1, values = 6:-6, group = "Performance", className = "info legend Performance") %>%
addLayersControl(
baseGroups = c("Funding", "Performance"),
position = "topleft"
) %>%
htmlwidgets::onRender("
function(el, x) {
var updateLegend = function () {
var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);
document.querySelectorAll('.legend').forEach(a => a.hidden=true);
document.querySelectorAll('.legend').forEach(l => {
if (l.classList.contains(selectedGroup)) l.hidden=false;
});
};
updateLegend();
this.on('baselayerchange', el => updateLegend());
}"
) # JS from https://gis.stackexchange.com/questions/342090/cannot-bind-legend-layer-to-polygon-layer-in-leaflet-r
p1 <- colorNumeric(
palette = met.brewer(palname)[1:100],
domain = mapdata$diff_from_gradecenter
)
pal <- colorNumeric(
palette = met.brewer(palname)[1:10],
domain = c(8000,24000)
)
pal <- colorNumeric(
palette = met.brewer(palname)[1:100],
domain = c(8000,24000)
)
leaflet(mapdata) %>% addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(
color = ~pal(scales::oob_squish(pp_total_raw, range = c(8000,24000))),
radius = ~(as.numeric(ncesenroll)/400),
popup = ~paste0(School,
"<br>Grade Distance from National Average: ", round(diff_from_gradecenter, digits = 3),
"<br>Per Pupil Funding: ", pp_total_raw
),
stroke = ~ifelse(!is.na(pp_total_raw), TRUE, FALSE),
group = "Funding"
) %>%
addLegend(pal = pal, values = 8000:24000, group = "Funding", className = "info legend Funding") %>%
addCircleMarkers(
color = ~p1(diff_from_gradecenter),
radius = ~(as.numeric(ncesenroll)/400),
popup = ~paste0(School,
"<br>Grade Distance from National Average: ", round(diff_from_gradecenter, digits = 3),
"<br>Per Pupil Funding: ", pp_total_raw
),
group = "Performance"
) %>%
addLegend(pal = p1, values = 6:-6, group = "Performance", className = "info legend Performance") %>%
addLayersControl(
baseGroups = c("Funding", "Performance"),
position = "topleft"
) %>%
htmlwidgets::onRender("
function(el, x) {
var updateLegend = function () {
var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);
document.querySelectorAll('.legend').forEach(a => a.hidden=true);
document.querySelectorAll('.legend').forEach(l => {
if (l.classList.contains(selectedGroup)) l.hidden=false;
});
};
updateLegend();
this.on('baselayerchange', el => updateLegend());
}"
) # JS from https://gis.stackexchange.com/questions/342090/cannot-bind-legend-layer-to-polygon-layer-in-leaflet-r
palname = "VanGogh3"
defaultcolor = met.brewer(palname,10)[9]
grade_diff_by_county_with_breaks_geo <- grade_diff_by_county_geo %>%
mutate(grade_diff_cat = factor(cut(mean_gcs_diff, breaks=c(-2, -1, 0, 1, 2))))
pal <- colorFactor(
palette = met.brewer(palname,3)[1:3],
domain = grade_diff_by_county_with_breaks_geo$grade_diff_cat
)
leaflet(grade_diff_by_county_with_breaks_geo) %>%
addPolygons(
fillColor = ~pal(grade_diff_cat),
opacity = .25,
color = "white",
fillOpacity = .5,
group = "Performance"
)  %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLayersControl(
baseGroups = "Performance",
position = "topright"
) %>%
addLegend(colors = met.brewer(palname,3)[1:3], values = ~grade_diff_cat, title = NULL, labels = c('1-2 grades lower than national average', 'Less than 1 grade lower than average', '0-1 grade higher than national average'), className = "info legend Performance")
palname = "Tam"
defaultcolor = met.brewer(palname,10)[9]
pal <- colorFactor(
palette = met.brewer(palname,3)[1:3],
domain = grade_diff_by_county_with_breaks_geo$grade_diff_cat
)
leaflet(grade_diff_by_county_with_breaks_geo) %>%
addPolygons(
fillColor = ~pal(grade_diff_cat),
opacity = .25,
color = "white",
fillOpacity = .5,
group = "Performance"
)  %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLayersControl(
baseGroups = "Performance",
position = "topright"
) %>%
addLegend(colors = met.brewer(palname,3)[1:3], values = ~grade_diff_cat, title = NULL, labels = c('1-2 grades lower than national average', 'Less than 1 grade lower than average', '0-1 grade higher than national average'), className = "info legend Performance")
pal <- colorFactor(
palette = met.brewer(palname,3, direction = -1)[1:3],
domain = grade_diff_by_county_with_breaks_geo$grade_diff_cat
)
leaflet(grade_diff_by_county_with_breaks_geo) %>%
addPolygons(
fillColor = ~pal(grade_diff_cat),
opacity = .25,
color = "white",
fillOpacity = .5,
group = "Performance"
)  %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLayersControl(
baseGroups = "Performance",
position = "topright"
) %>%
addLegend(colors = met.brewer(palname,3)[1:3], values = ~grade_diff_cat, title = NULL, labels = c('1-2 grades lower than national average', 'Less than 1 grade lower than average', '0-1 grade higher than national average'), className = "info legend Performance")
palname = "Homer1"
defaultcolor = met.brewer(palname,10)[9]
pal <- colorFactor(
palette = met.brewer(palname,3)[1:3],
domain = grade_diff_by_county_with_breaks_geo$grade_diff_cat
)
leaflet(grade_diff_by_county_with_breaks_geo) %>%
addPolygons(
fillColor = ~pal(grade_diff_cat),
opacity = .25,
color = "white",
fillOpacity = .5,
group = "Performance"
)  %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLayersControl(
baseGroups = "Performance",
position = "topright"
) %>%
addLegend(colors = met.brewer(palname,3)[1:3], values = ~grade_diff_cat, title = NULL, labels = c('1-2 grades lower than national average', 'Less than 1 grade lower than average', '0-1 grade higher than national average'), className = "info legend Performance")
mapdata <- wide_merged_data %>% filter(!is.na(gradecenter)&!is.na(gcs_mn_avg_ol)) %>%
mutate(diff_from_gradecenter = gcs_mn_avg_ol - gradecenter, pp_total_raw = as.numeric(pp_total_raw)) %>%
mutate(Longitude = as.numeric(Longitude), Latitude = as.numeric(Latitude))
p1 <- colorNumeric(
palette = met.brewer(palname)[1:10],
domain = mapdata$diff_from_gradecenter
)
pal <- colorNumeric(
palette = met.brewer(palname)[1:10],
domain = c(8000,24000)
)
leaflet(mapdata) %>% addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(
color = ~pal(scales::oob_squish(pp_total_raw, range = c(8000,24000))),
radius = ~(as.numeric(ncesenroll)/400),
popup = ~paste0(School,
"<br>Grade Distance from National Average: ", round(diff_from_gradecenter, digits = 3),
"<br>Per Pupil Funding: ", pp_total_raw
),
stroke = ~ifelse(!is.na(pp_total_raw), TRUE, FALSE),
group = "Funding"
) %>%
addLegend(pal = pal, values = 8000:24000, group = "Funding", className = "info legend Funding") %>%
addCircleMarkers(
color = ~p1(diff_from_gradecenter),
radius = ~(as.numeric(ncesenroll)/400),
popup = ~paste0(School,
"<br>Grade Distance from National Average: ", round(diff_from_gradecenter, digits = 3),
"<br>Per Pupil Funding: ", pp_total_raw
),
group = "Performance"
) %>%
addLegend(pal = p1, values = 6:-6, group = "Performance", className = "info legend Performance") %>%
addLayersControl(
baseGroups = c("Funding", "Performance"),
position = "topleft"
) %>%
htmlwidgets::onRender("
function(el, x) {
var updateLegend = function () {
var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);
document.querySelectorAll('.legend').forEach(a => a.hidden=true);
document.querySelectorAll('.legend').forEach(l => {
if (l.classList.contains(selectedGroup)) l.hidden=false;
});
};
updateLegend();
this.on('baselayerchange', el => updateLegend());
}"
) # JS from https://gis.stackexchange.com/questions/342090/cannot-bind-legend-layer-to-polygon-layer-in-leaflet-r
pal <- colorNumeric(
palette = met.brewer(palname, 10)[1:10],
domain = c(8000,24000)
)
leaflet(mapdata) %>% addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(
color = ~pal(scales::oob_squish(pp_total_raw, range = c(8000,24000))),
radius = ~(as.numeric(ncesenroll)/400),
popup = ~paste0(School,
"<br>Grade Distance from National Average: ", round(diff_from_gradecenter, digits = 3),
"<br>Per Pupil Funding: ", pp_total_raw
),
stroke = ~ifelse(!is.na(pp_total_raw), TRUE, FALSE),
group = "Funding"
) %>%
addLegend(pal = pal, values = 8000:24000, group = "Funding", className = "info legend Funding") %>%
addCircleMarkers(
color = ~p1(diff_from_gradecenter),
radius = ~(as.numeric(ncesenroll)/400),
popup = ~paste0(School,
"<br>Grade Distance from National Average: ", round(diff_from_gradecenter, digits = 3),
"<br>Per Pupil Funding: ", pp_total_raw
),
group = "Performance"
) %>%
addLegend(pal = p1, values = 6:-6, group = "Performance", className = "info legend Performance") %>%
addLayersControl(
baseGroups = c("Funding", "Performance"),
position = "topleft"
) %>%
htmlwidgets::onRender("
function(el, x) {
var updateLegend = function () {
var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);
document.querySelectorAll('.legend').forEach(a => a.hidden=true);
document.querySelectorAll('.legend').forEach(l => {
if (l.classList.contains(selectedGroup)) l.hidden=false;
});
};
updateLegend();
this.on('baselayerchange', el => updateLegend());
}"
) # JS from https://gis.stackexchange.com/questions/342090/cannot-bind-legend-layer-to-polygon-layer-in-leaflet-r
palname = "Homer2"
defaultcolor = met.brewer(palname,10)[9]
load("../CombinedDataLongFormat.RData")
load("../WideMergedData.RData")
grade_diff_by_county_with_breaks_geo <- grade_diff_by_county_geo %>%
mutate(grade_diff_cat = factor(cut(mean_gcs_diff, breaks=c(-2, -1, 0, 1, 2))))
pal <- colorFactor(
palette = met.brewer(palname,3)[1:3],
domain = grade_diff_by_county_with_breaks_geo$grade_diff_cat
)
leaflet(grade_diff_by_county_with_breaks_geo) %>%
addPolygons(
fillColor = ~pal(grade_diff_cat),
opacity = .25,
color = "white",
fillOpacity = .5,
group = "Performance"
)  %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLayersControl(
baseGroups = "Performance",
position = "topright"
) %>%
addLegend(colors = met.brewer(palname,3)[1:3], values = ~grade_diff_cat, title = NULL, labels = c('1-2 grades lower than national average', 'Less than 1 grade lower than average', '0-1 grade higher than national average'), className = "info legend Performance")
mapdata <- wide_merged_data %>% filter(!is.na(gradecenter)&!is.na(gcs_mn_avg_ol)) %>%
mutate(diff_from_gradecenter = gcs_mn_avg_ol - gradecenter, pp_total_raw = as.numeric(pp_total_raw)) %>%
mutate(Longitude = as.numeric(Longitude), Latitude = as.numeric(Latitude))
p1 <- colorNumeric(
palette = met.brewer(palname)[1:10],
domain = mapdata$diff_from_gradecenter
)
pal <- colorNumeric(
palette = met.brewer(palname, 10)[1:10],
domain = c(8000,24000)
)
leaflet(mapdata) %>% addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(
color = ~pal(scales::oob_squish(pp_total_raw, range = c(8000,24000))),
radius = ~(as.numeric(ncesenroll)/400),
popup = ~paste0(School,
"<br>Grade Distance from National Average: ", round(diff_from_gradecenter, digits = 3),
"<br>Per Pupil Funding: ", pp_total_raw
),
stroke = ~ifelse(!is.na(pp_total_raw), TRUE, FALSE),
group = "Funding"
) %>%
addLegend(pal = pal, values = 8000:24000, group = "Funding", className = "info legend Funding") %>%
addCircleMarkers(
color = ~p1(diff_from_gradecenter),
radius = ~(as.numeric(ncesenroll)/400),
popup = ~paste0(School,
"<br>Grade Distance from National Average: ", round(diff_from_gradecenter, digits = 3),
"<br>Per Pupil Funding: ", pp_total_raw
),
group = "Performance"
) %>%
addLegend(pal = p1, values = 6:-6, group = "Performance", className = "info legend Performance") %>%
addLayersControl(
baseGroups = c("Funding", "Performance"),
position = "topleft"
) %>%
htmlwidgets::onRender("
function(el, x) {
var updateLegend = function () {
var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);
document.querySelectorAll('.legend').forEach(a => a.hidden=true);
document.querySelectorAll('.legend').forEach(l => {
if (l.classList.contains(selectedGroup)) l.hidden=false;
});
};
updateLegend();
this.on('baselayerchange', el => updateLegend());
}"
) # JS from https://gis.stackexchange.com/questions/342090/cannot-bind-legend-layer-to-polygon-layer-in-leaflet-r
p1 <- colorNumeric(
palette = met.brewer(palname, 10)[1:10],
domain = mapdata$diff_from_gradecenter
)
pal <- colorNumeric(
palette = met.brewer(palname, 10)[1:10],
domain = c(8000,24000)
)
leaflet(mapdata) %>% addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(
color = ~pal(scales::oob_squish(pp_total_raw, range = c(8000,24000))),
radius = ~(as.numeric(ncesenroll)/400),
popup = ~paste0(School,
"<br>Grade Distance from National Average: ", round(diff_from_gradecenter, digits = 3),
"<br>Per Pupil Funding: ", pp_total_raw
),
stroke = ~ifelse(!is.na(pp_total_raw), TRUE, FALSE),
group = "Funding"
) %>%
addLegend(pal = pal, values = 8000:24000, group = "Funding", className = "info legend Funding") %>%
addCircleMarkers(
color = ~p1(diff_from_gradecenter),
radius = ~(as.numeric(ncesenroll)/400),
popup = ~paste0(School,
"<br>Grade Distance from National Average: ", round(diff_from_gradecenter, digits = 3),
"<br>Per Pupil Funding: ", pp_total_raw
),
group = "Performance"
) %>%
addLegend(pal = p1, values = 6:-6, group = "Performance", className = "info legend Performance") %>%
addLayersControl(
baseGroups = c("Funding", "Performance"),
position = "topleft"
) %>%
htmlwidgets::onRender("
function(el, x) {
var updateLegend = function () {
var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);
document.querySelectorAll('.legend').forEach(a => a.hidden=true);
document.querySelectorAll('.legend').forEach(l => {
if (l.classList.contains(selectedGroup)) l.hidden=false;
});
};
updateLegend();
this.on('baselayerchange', el => updateLegend());
}"
) # JS from https://gis.stackexchange.com/questions/342090/cannot-bind-legend-layer-to-polygon-layer-in-leaflet-r
