data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
mutate(ipw = case_when(
A == 1 ~ 1/ps,
A == 0 ~ 1/(1-ps)
))
example_ipw <- lm(Y ~ A, data = data, weights = ipw)
forceA0 <- data %>% mutate(A = 0)
forceA1 <- data %>% mutate(A = 1)
predA0 <- predict(outcome, newdata = forceA0)
predA1 <- predict(outcome, newdata = forceA1)
DR1 <-
(((    data$A) * data$Y) / (    data$ps)) -      # IPW part
((predA1 * (data$A - data$ps))) / (    data$ps)  # Other thing
DR0 <-
(((1 - data$A) * data$Y) / (1 - data$ps)) +      # IPW part
((predA0 * (data$A - data$ps))) / (1 - data$ps)  # Other thing
Estimator1 <- predA1 + ((data$Y * data$A) / (data$ps)) - ((predA1 * data$A) / data$ps)
Estimator0 <- predA0 + ((data$Y * (1 - data$A)) / (1 - data$ps)) - ((predA0 * (1 - data$A)) / (1 - data$ps))
part1 <- predA1
part2 <- ((data$Y * data$A) / (data$ps))
part3 <- -((predA1 * data$A) / data$ps)
part1A0 <- predA0
part2A0 <- ((data$Y * (1 - data$A)) / (1 - data$ps))
part3A0 <- -((predA0 * (1 - data$A)) / (1 - data$ps))
partdr1 <- mean(part1) - mean(part1A0)
partdr2 <- mean((data$Y * data$A) / (data$ps)) - mean((data$Y * (1 - data$A)) / (1 - data$ps))
partdr3 <- mean(-((predA1 * data$A) / data$ps)) - mean(-((predA0 * (1 - data$A)) / (1 - data$ps)))
mods <- t(c(outcome_formula,exposure_formula))
output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2], mean(part1), mean(part2), mean(-part3), mean(part1+part2+part3)))
output <- output %>%  mutate(across(where(is.numeric), ~ round(., digits = tabledigits)))
names(output) <- c("Outcome Formula","Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$B$", "$C$", "D", "E")
return(output)
}
#| fig-alt: "A causal graph with arrows from W, M, Z, and A to the outcome Y; an arrow from W to X; arrows from X and Z to A; and an arrow from A to M"
#| fig-cap: "Where Y is the outcome and A is a binary treatment. All relationships are linear."
dag <- dagitty('dag { bb="0,0,1,1"
A [exposure,pos="0.1,0.5"]
M [pos="0.5,0.4"]
W [pos="0.9,0.35"]
X [pos="0.1,0.35"]
Y [outcome,pos="0.9,0.5"]
Z [pos="0.5,0.6"]
A -> M
A -> Y
M -> Y
W -> X
W -> Y
X -> A
Z -> A
Z -> Y
}')
ggdag(dag)  +
theme_dag_blank() +
geom_dag_point(color = "lightblue1") +
geom_dag_text(color = "black")
ace_estimates_1 <- t(get_normal_methods(data, Y ~ A + Z + W + M, A ~ X))
kable(ace_estimates_1, caption = "The Researcher's Puzzling Result", col.names = "")
part_estimates_1 <- t(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X))
rownames(part_estimates_1) <- c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum \\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)}$","Difference")
kable(part_estimates_1, escape = FALSE, caption = "It does!", col.names = NULL)
kable(part_estimates_1, escape = FALSE, caption = "It does!", col.names = NULL, digits = tabledigits)
kable(part_estimates_1, escape = TRUE, caption = "It does!", col.names = NULL, digits = tabledigits)
part_estimates_1 <- as.data.frame(t(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X)))
rownames(part_estimates_1) <- c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum \\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)}$","Difference")
kable(part_estimates_1, escape = FALSE, caption = "It does!", col.names = NULL, digits = tabledigits)
tabledigits
part_estimates_2 <- as.data.frame(t(get_dr_parts2_3(data, Y ~ A + M, A ~ X)))
part_estimates_2_A <- as.data.frame(t(get_dr_parts2_3(data, Y ~ A, A ~ M)))
rownames(part_estimates_2) <- c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum \\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)}$","Difference")
part_estimates_2 <- as.data.frame(cbind(part_estimates_2, part_estimates_2_A))
kable(part_estimates_2, escape = FALSE, caption = "", col.names = NULL, digits = tabledigits)
set.seed(77)
n <- 100000
Z <- rnorm(n, 1, 2) # Z
W <- rbinom(n, 1, .5) # W
X <- rnorm(n, Z, 2) # X
N <- rnorm(n, 10, 5)
log_odds_A <- .25 * Z + .5 * X + .1 * N
odds_A <- exp(log_odds_A)
p_A <- odds_A / (1 + odds_A)
A <- rbinom(n, 1, p_A) # A
M <- rnorm(n, 20, 1) # M
Y <- rnorm(n, A + W + 2 * Z + 0.05 * M + rnorm(n, 2, 1), .25) # Y
data <- data.frame(A = (A), Y = Y, Z = Z, M = M, W = (W), X = X)
part_estimates_2 <- as.data.frame(t(get_dr_parts2_3(data, Y ~ A, A ~ X)))
install.packages("ggforce")
library(dplyr)
library(ggplot2)
library(dagitty)
library(ggdag)
library(knitr)
library(ggforce)
tabledigits <- 5
ggplot() +
geom_circle()
ggplot() +
geom_circle(radius = 5)
ggplot() +
geom_circle(0,0, radius = 5)
geom_circle
?geom_circle
ggplot() +
geom_circle(x0 = 0,y0 = 0, radius = 5)
ggplot() +
geom_circle(aes(x0 = 0,y0 = 0), radius = 5)
ggplot() +
geom_circle(aes(x0 = 0,y0 = 0), r = 5)
ggplot() +
geom_circle(aes(x0 = 0,y0 = 0, r = 5))
ggplot() +
geom_circle(aes(x0 = c(0,1),y0 = c(0,0), r = c(1,1)))
ggplot() +
geom_circle(aes(x0 = c(0,.75),y0 = c(0,0), r = c(1,1)))
ggplot() +
geom_circle(aes(x0 = c(0,.75),y0 = c(0,0), r = c(1,1))) + theme_dag_blank()
#| fig-asp: 1
ggplot() +
geom_circle(aes(x0 = c(0,.75),y0 = c(0,0), r = c(1,1))) +
theme_dag_blank()
#| fig-width: 1.75
#| fig-height: 1
ggplot() +
geom_circle(aes(x0 = c(0,.75),y0 = c(0,0), r = c(1,1))) +
theme_dag_blank()
#| fig-width: 1.75
#| fig-height: 2
ggplot() +
geom_circle(aes(x0 = c(0,.75),y0 = c(0,0), r = c(1,1))) +
theme_dag_blank()
quarto::quarto_render()
### Simulating Data
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
library(dplyr)
library(ggplot2)
library(dagitty)
library(ggdag)
library(knitr)
library(ggforce)
tabledigits <- 5
set.seed(7)
n <- 100000
Z <- rnorm(n, 1, 2) # Z
W <- rbinom(n, 1, .5) # W
X <- rnorm(n, 2*W, 2) # X
M <- rnorm(n, 20, 1) # M
N <- rnorm(n, 10, 2) # N
log_odds_A <- .25 * Z + .5 * X + .1 * N
odds_A <- exp(log_odds_A)
p_A <- odds_A / (1 + odds_A)
A <- rbinom(n, 1, p_A) # A
Y <- rnorm(n, A + W + 2 * Z + 0.05 * M + rnorm(n, 2, 1), .25) # Y
data <- data.frame(A = (A), Y = Y, Z = Z, M = M, W = (W), X = X)
get_normal_methods <- function(data, outcome_formula, exposure_formula) {
outcome <- lm(outcome_formula)
ps_model <- glm(exposure_formula, family = "binomial")
data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
mutate(ipw = case_when(
A == 1 ~ 1/ps,
A == 0 ~ 1/(1-ps)
))
example_ipw <- lm(Y ~ A, data = data, weights = ipw)
# print(summary(example_ipw)$coefficients)
# print(summary(outcome)$coefficients)
mods <- t(c(outcome_formula,exposure_formula))
output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2]))
names(output) <- c("Outcome Formula","Exposure Formula","Causal Effect Estimate from Outcome Model", "Causal Effect Estimate from Treatment Model")
return(output)
}
get_dr_parts2_3 <- function(data, outcome_formula, exposure_formula) {
outcome <- lm(outcome_formula)
ps_model <- glm(exposure_formula, family = "binomial")
forceA0 <- data %>% mutate(A = 0)
forceA1 <- data %>% mutate(A = 1)
predA0 <- predict(outcome, newdata = forceA0)
predA1 <- predict(outcome, newdata = forceA1)
data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
mutate(ipw = case_when(
A == 1 ~ 1/ps,
A == 0 ~ 1/(1-ps)
))
part1 <- predA1
part2 <- ((data$Y * data$A) / (data$ps))
part3 <- -((predA1 * data$A) / data$ps)
example_ipw <- lm(Y ~ A, data = data, weights = ipw)
mods <- t(c(outcome_formula,exposure_formula))
output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2], mean(part2), mean(-part3), mean(part2+part3)))
names(output) <- c("Outcome Formula","Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$B$", "$C$", "D")
return(output)
}
get_dr_parts <- function(data, outcome_formula, exposure_formula) {
outcome <- lm(outcome_formula)
ps_model <- glm(exposure_formula, family = "binomial")
data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
mutate(ipw = case_when(
A == 1 ~ 1/ps,
A == 0 ~ 1/(1-ps)
))
example_ipw <- lm(Y ~ A, data = data, weights = ipw)
forceA0 <- data %>% mutate(A = 0)
forceA1 <- data %>% mutate(A = 1)
predA0 <- predict(outcome, newdata = forceA0)
predA1 <- predict(outcome, newdata = forceA1)
DR1 <-
(((    data$A) * data$Y) / (    data$ps)) -      # IPW part
((predA1 * (data$A - data$ps))) / (    data$ps)  # Other thing
DR0 <-
(((1 - data$A) * data$Y) / (1 - data$ps)) +      # IPW part
((predA0 * (data$A - data$ps))) / (1 - data$ps)  # Other thing
Estimator1 <- predA1 + ((data$Y * data$A) / (data$ps)) - ((predA1 * data$A) / data$ps)
Estimator0 <- predA0 + ((data$Y * (1 - data$A)) / (1 - data$ps)) - ((predA0 * (1 - data$A)) / (1 - data$ps))
part1 <- predA1
part2 <- ((data$Y * data$A) / (data$ps))
part3 <- -((predA1 * data$A) / data$ps)
part1A0 <- predA0
part2A0 <- ((data$Y * (1 - data$A)) / (1 - data$ps))
part3A0 <- -((predA0 * (1 - data$A)) / (1 - data$ps))
partdr1 <- mean(part1) - mean(part1A0)
partdr2 <- mean((data$Y * data$A) / (data$ps)) - mean((data$Y * (1 - data$A)) / (1 - data$ps))
partdr3 <- mean(-((predA1 * data$A) / data$ps)) - mean(-((predA0 * (1 - data$A)) / (1 - data$ps)))
mods <- t(c(outcome_formula,exposure_formula))
output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2], partdr1, partdr2, partdr3, sum(partdr1, partdr2, partdr3)))
names(output) <- c("Outcome Formula","Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$B$", "$C$", "D", "E")
return(output)
}
#| fig-alt: "A causal graph with arrows from W, M, Z, and A to the outcome Y; an arrow from W to X; arrows from X, Z, and N to A"
#| fig-cap: "Where Y is the outcome and A is a binary treatment. All relationships are linear."
dag <- dagitty('dag { bb="0,0,1,1"
A [exposure,pos="0.1,0.5"]
M [pos="0.6,0.4"]
N [pos="0.4,0.4"]
W [pos="0.9,0.35"]
X [pos="0.1,0.35"]
Y [outcome,pos="0.9,0.5"]
Z [pos="0.5,0.6"]
A -> Y
M -> Y
W -> X
W -> Y
X -> A
Z -> A
Z -> Y
N -> A
}')
ggdag(dag)  +
theme_dag_blank() +
geom_dag_point(color = "lightblue1") +
geom_dag_text(color = "black")
ace_estimates_1 <- as.data.frame(t(get_normal_methods(data, Y ~ A + Z + W + M, A ~ X)))
kable(ace_estimates_1, caption = "The Researcher's Puzzling Result", col.names = "", digits = tabledigits)
part_estimates_1 <- as.data.frame(t(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X)))
rownames(part_estimates_1) <- c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum \\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)}$","Difference")
kable(part_estimates_1, escape = FALSE, caption = "It does!", col.names = NULL, digits = tabledigits)
part_estimates_2 <- as.data.frame(t(get_dr_parts2_3(data, Y ~ A + X, A ~ X + Z + N)))
part_estimates_2_A <- as.data.frame(t(get_dr_parts2_3(data, Y ~ A, A ~ X)))
rownames(part_estimates_2) <- c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum \\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)}$","Difference")
part_estimates_2 <- as.data.frame(cbind(part_estimates_2, part_estimates_2_A))
kable(part_estimates_2, escape = FALSE, caption = "", col.names = NULL, digits = tabledigits)
summary(A)
log_odds_A <- .25 * Z + .25 * X + .1 * N
odds_A <- exp(log_odds_A)
p_A <- odds_A / (1 + odds_A)
A <- rbinom(n, 1, p_A) # A
summary(A)
log_odds_A <- .25 * Z + .5 * X + .5 * N
odds_A <- exp(log_odds_A)
p_A <- odds_A / (1 + odds_A)
A <- rbinom(n, 1, p_A) # A
summary(A)
summary(N)
summary(Z)
summary(X)
log_odds_A <- .25 * Z + .25 * X + .1 * N
odds_A <- exp(log_odds_A)
p_A <- odds_A / (1 + odds_A)
A <- rbinom(n, 1, p_A) # A
summary(A)
log_odds_A <- .1 * Z + .25 * X + .1 * N
odds_A <- exp(log_odds_A)
p_A <- odds_A / (1 + odds_A)
A <- rbinom(n, 1, p_A) # A
summary(A)
log_odds_A <- .1 * Z + .1 * X + .1 * N
odds_A <- exp(log_odds_A)
p_A <- odds_A / (1 + odds_A)
A <- rbinom(n, 1, p_A) # A
summary(A)
log_odds_A <- .1 * Z + .1 * X - .1 * N
odds_A <- exp(log_odds_A)
p_A <- odds_A / (1 + odds_A)
A <- rbinom(n, 1, p_A) # A
summary(A)
log_odds_A <- .1 * Z + .25 * X - .1 * N
odds_A <- exp(log_odds_A)
p_A <- odds_A / (1 + odds_A)
A <- rbinom(n, 1, p_A) # A
summary(A)
log_odds_A <- .5 * Z + .25 * X - .1 * N
odds_A <- exp(log_odds_A)
p_A <- odds_A / (1 + odds_A)
A <- rbinom(n, 1, p_A) # A
summary(A)
log_odds_A <- .5 * Z + .5 * X - .1 * N
odds_A <- exp(log_odds_A)
p_A <- odds_A / (1 + odds_A)
A <- rbinom(n, 1, p_A) # A
summary(A)
set.seed(7)
n <- 100000
Z <- rnorm(n, 1, 2) # Z
W <- rbinom(n, 1, .5) # W
X <- rnorm(n, 2*W, 2) # X
M <- rnorm(n, 20, 1) # M
N <- rnorm(n, 10, 2) # N
log_odds_A <- .5 * Z + .5 * X - .1 * N
odds_A <- exp(log_odds_A)
p_A <- odds_A / (1 + odds_A)
A <- rbinom(n, 1, p_A) # A
summary(A)
Y <- rnorm(n, A + W + 2 * Z + 0.05 * M + rnorm(n, 2, 1), .25) # Y
data <- data.frame(A = (A), Y = Y, Z = Z, M = M, W = (W), X = X)
library(dplyr)
library(ggplot2)
library(dagitty)
library(ggdag)
library(knitr)
library(ggforce)
tabledigits <- 5
set.seed(7)
n <- 100000
Z <- rnorm(n, 1, 2) # Z
W <- rbinom(n, 1, .5) # W
X <- rnorm(n, 2*W, 2) # X
M <- rnorm(n, 20, 1) # M
N <- rnorm(n, 10, 2) # N
log_odds_A <- .5 * Z + .5 * X - .1 * N
odds_A <- exp(log_odds_A)
p_A <- odds_A / (1 + odds_A)
A <- rbinom(n, 1, p_A) # A
summary(A)
Y <- rnorm(n, A + W + 2 * Z + 0.05 * M + rnorm(n, 2, 1), .25) # Y
data <- data.frame(A = (A), Y = Y, Z = Z, M = M, W = (W), X = X)
get_normal_methods <- function(data, outcome_formula, exposure_formula) {
outcome <- lm(outcome_formula)
ps_model <- glm(exposure_formula, family = "binomial")
data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
mutate(ipw = case_when(
A == 1 ~ 1/ps,
A == 0 ~ 1/(1-ps)
))
example_ipw <- lm(Y ~ A, data = data, weights = ipw)
# print(summary(example_ipw)$coefficients)
# print(summary(outcome)$coefficients)
mods <- t(c(outcome_formula,exposure_formula))
output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2]))
names(output) <- c("Outcome Formula","Exposure Formula","Causal Effect Estimate from Outcome Model", "Causal Effect Estimate from Treatment Model")
return(output)
}
get_dr_parts2_3 <- function(data, outcome_formula, exposure_formula) {
outcome <- lm(outcome_formula)
ps_model <- glm(exposure_formula, family = "binomial")
forceA0 <- data %>% mutate(A = 0)
forceA1 <- data %>% mutate(A = 1)
predA0 <- predict(outcome, newdata = forceA0)
predA1 <- predict(outcome, newdata = forceA1)
data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
mutate(ipw = case_when(
A == 1 ~ 1/ps,
A == 0 ~ 1/(1-ps)
))
part1 <- predA1
part2 <- ((data$Y * data$A) / (data$ps))
part3 <- -((predA1 * data$A) / data$ps)
example_ipw <- lm(Y ~ A, data = data, weights = ipw)
mods <- t(c(outcome_formula,exposure_formula))
output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2], mean(part2), mean(-part3), mean(part2+part3)))
names(output) <- c("Outcome Formula","Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$B$", "$C$", "D")
return(output)
}
get_dr_parts <- function(data, outcome_formula, exposure_formula) {
outcome <- lm(outcome_formula)
ps_model <- glm(exposure_formula, family = "binomial")
data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
mutate(ipw = case_when(
A == 1 ~ 1/ps,
A == 0 ~ 1/(1-ps)
))
example_ipw <- lm(Y ~ A, data = data, weights = ipw)
forceA0 <- data %>% mutate(A = 0)
forceA1 <- data %>% mutate(A = 1)
predA0 <- predict(outcome, newdata = forceA0)
predA1 <- predict(outcome, newdata = forceA1)
DR1 <-
(((    data$A) * data$Y) / (    data$ps)) -      # IPW part
((predA1 * (data$A - data$ps))) / (    data$ps)  # Other thing
DR0 <-
(((1 - data$A) * data$Y) / (1 - data$ps)) +      # IPW part
((predA0 * (data$A - data$ps))) / (1 - data$ps)  # Other thing
Estimator1 <- predA1 + ((data$Y * data$A) / (data$ps)) - ((predA1 * data$A) / data$ps)
Estimator0 <- predA0 + ((data$Y * (1 - data$A)) / (1 - data$ps)) - ((predA0 * (1 - data$A)) / (1 - data$ps))
part1 <- predA1
part2 <- ((data$Y * data$A) / (data$ps))
part3 <- -((predA1 * data$A) / data$ps)
part1A0 <- predA0
part2A0 <- ((data$Y * (1 - data$A)) / (1 - data$ps))
part3A0 <- -((predA0 * (1 - data$A)) / (1 - data$ps))
partdr1 <- mean(part1) - mean(part1A0)
partdr2 <- mean((data$Y * data$A) / (data$ps)) - mean((data$Y * (1 - data$A)) / (1 - data$ps))
partdr3 <- mean(-((predA1 * data$A) / data$ps)) - mean(-((predA0 * (1 - data$A)) / (1 - data$ps)))
mods <- t(c(outcome_formula,exposure_formula))
output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2], partdr1, partdr2, partdr3, sum(partdr1, partdr2, partdr3)))
names(output) <- c("Outcome Formula","Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$B$", "$C$", "D", "E")
return(output)
}
#| fig-alt: "A causal graph with arrows from W, M, Z, and A to the outcome Y; an arrow from W to X; arrows from X, Z, and N to A"
#| fig-cap: "Where Y is the outcome and A is a binary treatment. All relationships are linear."
dag <- dagitty('dag { bb="0,0,1,1"
A [exposure,pos="0.1,0.5"]
M [pos="0.6,0.4"]
N [pos="0.4,0.4"]
W [pos="0.9,0.35"]
X [pos="0.1,0.35"]
Y [outcome,pos="0.9,0.5"]
Z [pos="0.5,0.6"]
A -> Y
M -> Y
W -> X
W -> Y
X -> A
Z -> A
Z -> Y
N -> A
}')
ggdag(dag)  +
theme_dag_blank() +
geom_dag_point(color = "lightblue1") +
geom_dag_text(color = "black")
ace_estimates_1 <- as.data.frame(t(get_normal_methods(data, Y ~ A + Z + W + M, A ~ X)))
kable(ace_estimates_1, caption = "The Researcher's Puzzling Result", col.names = "", digits = tabledigits)
part_estimates_2 <- as.data.frame(t(get_dr_parts2_3(data, Y ~ A + X, A ~ X + Z + N)))
part_estimates_2_A <- as.data.frame(t(get_dr_parts2_3(data, Y ~ A, A ~ X)))
rownames(part_estimates_2) <- c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum \\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)}$","Difference")
part_estimates_2 <- as.data.frame(cbind(part_estimates_2, part_estimates_2_A))
kable(part_estimates_2, escape = FALSE, caption = "", col.names = NULL, digits = tabledigits)
part_estimates_2 <- as.data.frame(t(get_dr_parts2_3(data, Y ~ A + X, A ~ X + Z + N)))
part_estimates_2_A <- as.data.frame(t(get_dr_parts2_3(data, Y ~ A, A ~ M)))
rownames(part_estimates_2) <- c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum \\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)}$","Difference")
part_estimates_2 <- as.data.frame(cbind(part_estimates_2, part_estimates_2_A))
kable(part_estimates_2, escape = FALSE, caption = "", col.names = NULL, digits = tabledigits)
accurate <- as.data.frame(t(get_dr_parts(data, Y ~ A + Z + W + M, A ~ Z + X + N)))
WrongExposureX <- as.data.frame(t(get_dr_parts(data, Y ~ A + Z + W + M, A ~ X + N)))
WrongExposureZ <- as.data.frame(t(get_dr_parts(data, Y ~ A + Z + W + M, A ~ Z)))
VeryWrongExposure <- as.data.frame(t(get_dr_parts(data, Y ~ A + Z + W + M, A ~ N*N + N)))
WrongOutcome1 <- as.data.frame(t(get_dr_parts(data, Y ~ A + N, A ~ Z + X + N)))
WrongOutcome2 <- as.data.frame(t(get_dr_parts(data, Y ~ A * Z + W, A ~ Z + X + N)))
WrongOutcome3 <- as.data.frame(t(get_dr_parts(data, Y ~ A, A ~ Z + X + N)))
inaccurate <- as.data.frame(t(get_dr_parts(data, Y ~ A, A ~ X)))
inaccurate2 <- as.data.frame(t(get_dr_parts(data, Y ~ A + M, A ~ M)))
rownames(accurate) <- c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "A", "B","C","Doubly Robust Estimate")
kable(cbind(accurate, WrongExposureX, WrongExposureZ, VeryWrongExposure, inaccurate),
col.names = c("Accurate Models", "Inaccurate Exposure Model", "Inaccurate Exposure Model", "Very Inaccurate Exposure Model", "Inaccurate Models"),
digits = tabledigits)
accurate <- as.data.frame(t(get_dr_parts(data, Y ~ A + Z + W + M, A ~ Z + X + N)))
WrongExposureX <- as.data.frame(t(get_dr_parts(data, Y ~ A + Z + W + M, A ~ X + N)))
WrongExposureZ <- as.data.frame(t(get_dr_parts(data, Y ~ A + Z + W + M, A ~ Z)))
VeryWrongExposure <- as.data.frame(t(get_dr_parts(data, Y ~ A + Z + W + M, A ~ N*N + N)))
WrongOutcome1 <- as.data.frame(t(get_dr_parts(data, Y ~ A + N, A ~ Z + X + N)))
WrongOutcome2 <- as.data.frame(t(get_dr_parts(data, Y ~ A * Z + W, A ~ Z + X + N)))
WrongOutcome3 <- as.data.frame(t(get_dr_parts(data, Y ~ A, A ~ Z + X + N)))
inaccurate <- as.data.frame(t(get_dr_parts(data, Y ~ A, A ~ X)))
inaccurate2 <- as.data.frame(t(get_dr_parts(data, Y ~ A, A ~ M)))
rownames(accurate) <- c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "A", "B","C","Doubly Robust Estimate")
kable(cbind(accurate, WrongExposureX, WrongExposureZ, VeryWrongExposure, inaccurate),
col.names = c("Accurate Models", "Inaccurate Exposure Model", "Inaccurate Exposure Model", "Very Inaccurate Exposure Model", "Inaccurate Models"),
digits = tabledigits)
kable(cbind(accurate, WrongOutcome1, WrongOutcome2, WrongOutcome3, inaccurate, inaccurate2),
col.names = c("Accurate Models","Inaccurate Outcome Model", "Inaccurate Outcome Model", "Very Inaccurate Outcome Model", "Inaccurate Models", "Inaccurate Models"),
digits = tabledigits)
quarto::quarto_render()
seq(100:100000, by=1000)
seq(100,100000, by=1000)
print(i)
for (i in seq(1000,100000, by=1000)) {
print(i)
}
limit_check(data, A ~ X + N + Z)
limit_check <- function(data, exposure_formula) {
ps_model <- glm(exposure_formula, family = "binomial")
data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response"))
for (i in seq(1000,100000, by=1000)) {
print(i)
}
}
limit_check(data, A ~ X + N + Z)
limit_check <- function(data, exposure_formula) {
ps_model <- glm(exposure_formula, family = "binomial")
data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response"))
for (i in seq(1000,100000, by=1000)) {
print(mean(A[0:i]))
}
}
limit_check(data, A ~ X + N + Z)
