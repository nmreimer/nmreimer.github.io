return(output)
}
#| caption: "The Researcher's Puzzling Result"
ace_estimates_1 <- as.data.frame(t(get_normal_methods(data, Y ~ A + Z + W + M, A ~ X)))
colnames(ace_estimates_1) <- ""
ace_estimates_1
get_normal_methods <- function(data, outcome_formula, exposure_formula) {
outcome <- lm(outcome_formula)
ps_model <- glm(exposure_formula, family = "binomial")
data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
mutate(ipw = case_when(
A == 1 ~ 1/ps,
A == 0 ~ 1/(1-ps)
))
example_ipw <- lm(Y ~ A, data = data, weights = ipw)
print(summary(example_ipw)$coefficients)
mods <- t(c(outcome_formula,exposure_formula))
output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2]))
names(output) <- c("Outcome Formula","Exposure Formula","Causal Effect Estimate from Outcome Model", "Causal Effect Estimate from Treatment Model")
return(output)
}
#| caption: "The Researcher's Puzzling Result"
ace_estimates_1 <- as.data.frame(t(get_normal_methods(data, Y ~ A + Z + W + M, A ~ X)))
colnames(ace_estimates_1) <- ""
ace_estimates_1
get_normal_methods <- function(data, outcome_formula, exposure_formula) {
outcome <- lm(outcome_formula)
ps_model <- glm(exposure_formula, family = "binomial")
data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
mutate(ipw = case_when(
A == 1 ~ 1/ps,
A == 0 ~ 1/(1-ps)
))
example_ipw <- lm(Y ~ A, data = data, weights = ipw)
print(summary(example_ipw)$coefficients[4])
mods <- t(c(outcome_formula,exposure_formula))
output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2]))
names(output) <- c("Outcome Formula","Exposure Formula","Causal Effect Estimate from Outcome Model", "Causal Effect Estimate from Treatment Model")
return(output)
}
#| caption: "The Researcher's Puzzling Result"
ace_estimates_1 <- as.data.frame(t(get_normal_methods(data, Y ~ A + Z + W + M, A ~ X)))
colnames(ace_estimates_1) <- ""
ace_estimates_1
get_normal_methods <- function(data, outcome_formula, exposure_formula) {
outcome <- lm(outcome_formula)
ps_model <- glm(exposure_formula, family = "binomial")
data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
mutate(ipw = case_when(
A == 1 ~ 1/ps,
A == 0 ~ 1/(1-ps)
))
example_ipw <- lm(Y ~ A, data = data, weights = ipw)
print(summary(example_ipw)$coefficients)
mods <- t(c(outcome_formula,exposure_formula))
output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2]))
names(output) <- c("Outcome Formula","Exposure Formula","Causal Effect Estimate from Outcome Model", "Causal Effect Estimate from Treatment Model")
return(output)
}
#| caption: "The Researcher's Puzzling Result"
ace_estimates_1 <- as.data.frame(t(get_normal_methods(data, Y ~ A + Z + W + M, A ~ X)))
colnames(ace_estimates_1) <- ""
ace_estimates_1
get_normal_methods <- function(data, outcome_formula, exposure_formula) {
outcome <- lm(outcome_formula)
ps_model <- glm(exposure_formula, family = "binomial")
data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
mutate(ipw = case_when(
A == 1 ~ 1/ps,
A == 0 ~ 1/(1-ps)
))
example_ipw <- lm(Y ~ A, data = data, weights = ipw)
mods <- t(c(outcome_formula,exposure_formula))
output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2]))
names(output) <- c("Outcome Formula","Exposure Formula","Causal Effect Estimate from Outcome Model", "Causal Effect Estimate from Treatment Model")
return(output)
}
#| caption: "The Researcher's Puzzling Result"
ace_estimates_1 <- as.data.frame(t(get_normal_methods(data, Y ~ A + Z + W + M, A ~ X)))
colnames(ace_estimates_1) <- ""
ace_estimates_1
#| fig-alt: "A causal graph with arrows from W, M, Z, and A to the outcome Y; an arrow from W to X; arrows from X and Z to A; and an arrow from A to M"
#| fig-cap: "Where Y is the outcome and A is a binary treatment. All relationships are linear."
dag <- dagitty('dag { bb="0,0,1,1"
A [exposure,pos="0.1,0.5"]
M [pos="0.5,0.4"]
W [pos="0.9,0.35"]
X [pos="0.1,0.35"]
Y [outcome,pos="0.9,0.5"]
Z [pos="0.5,0.6"]
A -> M
A -> Y
M -> Y
W -> X
W -> Y
X -> A
Z -> A
Z -> Y
}')
ggdag(dag)  +
theme_dag_blank() +
geom_dag_point(color = "lightblue1") +
geom_dag_text(color = "black")
print(summary(example_ipw)$coefficients)
get_normal_methods <- function(data, outcome_formula, exposure_formula) {
outcome <- lm(outcome_formula)
ps_model <- glm(exposure_formula, family = "binomial")
data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
mutate(ipw = case_when(
A == 1 ~ 1/ps,
A == 0 ~ 1/(1-ps)
))
example_ipw <- lm(Y ~ A, data = data, weights = ipw)
print(summary(example_ipw)$coefficients)
print(summary(example_ipw)$coefficients)
mods <- t(c(outcome_formula,exposure_formula))
output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2]))
names(output) <- c("Outcome Formula","Exposure Formula","Causal Effect Estimate from Outcome Model", "Causal Effect Estimate from Treatment Model")
return(output)
}
#| caption: "The Researcher's Puzzling Result"
ace_estimates_1 <- as.data.frame(t(get_normal_methods(data, Y ~ A + Z + W + M, A ~ X)))
colnames(ace_estimates_1) <- ""
ace_estimates_1
get_normal_methods <- function(data, outcome_formula, exposure_formula) {
outcome <- lm(outcome_formula)
ps_model <- glm(exposure_formula, family = "binomial")
data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
mutate(ipw = case_when(
A == 1 ~ 1/ps,
A == 0 ~ 1/(1-ps)
))
example_ipw <- lm(Y ~ A, data = data, weights = ipw)
print(summary(example_ipw)$coefficients)
print(summary(outcome)$coefficients)
mods <- t(c(outcome_formula,exposure_formula))
output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2]))
names(output) <- c("Outcome Formula","Exposure Formula","Causal Effect Estimate from Outcome Model", "Causal Effect Estimate from Treatment Model")
return(output)
}
#| caption: "The Researcher's Puzzling Result"
ace_estimates_1 <- as.data.frame(t(get_normal_methods(data, Y ~ A + Z + W + M, A ~ X)))
colnames(ace_estimates_1) <- ""
ace_estimates_1
get_double_robust <- function(data, outcome_formula, exposure_formula) {
outcome <- lm(outcome_formula)
ps_model <- glm(exposure_formula, family = "binomial")
data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
mutate(ipw = case_when(
A == 1 ~ 1/ps,
A == 0 ~ 1/(1-ps)
))
example_ipw <- lm(Y ~ A, data = data, weights = ipw)
forceA0 <- data %>% mutate(A = 0)
forceA1 <- data %>% mutate(A = 1)
predA0 <- predict(outcome, newdata = forceA0)
predA1 <- predict(outcome, newdata = forceA1)
DR1 <-
(((    data$A) * data$Y) / (    data$ps)) -      # IPW part
((predA1 * (data$A - data$ps))) / (    data$ps)  # Other thing
DR0 <-
(((1 - data$A) * data$Y) / (1 - data$ps)) +      # IPW part
((predA0 * (data$A - data$ps))) / (1 - data$ps)  # Other thing
Estimator1 <- predA1 + ((data$Y * data$A) / (data$ps)) - ((predA1 * data$A) / data$ps)
Estimator0 <- predA0 + ((data$Y * (1 - data$A)) / (1 - data$ps)) - ((predA0 * (1 - data$A)) / (1 - data$ps))
part1 <- predA1
part2 <- ((data$Y * data$A) / (data$ps))
part3 <- -((predA1 * data$A) / data$ps)
# print("DR1")
# print(mean(DR0))
# print("Est1")
# print(mean(Estimator0))
mods <- t(c(outcome_formula,exposure_formula))
output <- as.data.frame(cbind(mods, mean(DR1) - mean(DR0), mean(Estimator1) - mean(Estimator0), outcome$coefficients[2], example_ipw$coefficients[2], mean(part1), mean(part2), mean(part3)))
names(output) <- c("Outcome Formula","Exposure Formula","Double Robust Causal Effect Estimate", "Double Robust Causal Effect Estimate 2", "Outcome Model Estimate", "IPW Estimate", "part1", "part2", "part3")
return(output)
}
accurate <- get_double_robust(data, Y ~ A + Z + W + M, A ~ Z + X)
WrongExposureX <- get_double_robust(data, Y ~ A + Z + W + M, A ~ X)
WrongExposureZ <- get_double_robust(data, Y ~ A + Z + W + M, A ~ Z)
VeryWrongExposure <- get_double_robust(data, Y ~ A + Z + W + M, A ~ 1)
WrongOutcome1 <- get_double_robust(data, Y ~ A + Z + W, A ~ Z + X)
WrongOutcome2 <- get_double_robust(data, Y ~ A + Z, A ~ Z + X)
WrongOutcome3 <- get_double_robust(data, Y ~ A, A ~ Z + X)
inaccurate <- get_double_robust(data, Y ~ A, A ~ X)
inaccurate2 <- get_double_robust(data, Y ~ A + M, A ~ 1)
print.data.frame(rbind(accurate, WrongExposureX, WrongExposureZ, VeryWrongExposure, WrongOutcome1, WrongOutcome2, WrongOutcome3, inaccurate, inaccurate2),
row.names = c("Accurate Models", "Inaccurate Exposure Model", "Inaccurate Exposure Model", "Very Inaccurate Exposure Model", "Inaccurate Outcome Model", "Inaccurate Outcome Model", "Very Inaccurate Outcome Model", "Inaccurate Models", "Inaccurate Models"))
# outcome <- lm(Y ~ (A) + Z + W + M) # model of outcome
# ps_model <- glm(A ~ Z + X, family = "binomial") # incorrect model of exposure
get_double_robust <- function(data, outcome_formula, exposure_formula) {
outcome <- lm(outcome_formula)
ps_model <- glm(exposure_formula, family = "binomial")
data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
mutate(ipw = case_when(
A == 1 ~ 1/ps,
A == 0 ~ 1/(1-ps)
))
example_ipw <- lm(Y ~ A, data = data, weights = ipw)
forceA0 <- data %>% mutate(A = 0)
forceA1 <- data %>% mutate(A = 1)
predA0 <- predict(outcome, newdata = forceA0)
predA1 <- predict(outcome, newdata = forceA1)
DR1 <-
(((    data$A) * data$Y) / (    data$ps)) -      # IPW part
((predA1 * (data$A - data$ps))) / (    data$ps)  # Other thing
DR0 <-
(((1 - data$A) * data$Y) / (1 - data$ps)) +      # IPW part
((predA0 * (data$A - data$ps))) / (1 - data$ps)  # Other thing
Estimator1 <- predA1 + ((data$Y * data$A) / (data$ps)) - ((predA1 * data$A) / data$ps)
Estimator0 <- predA0 + ((data$Y * (1 - data$A)) / (1 - data$ps)) - ((predA0 * (1 - data$A)) / (1 - data$ps))
part1 <- predA1
part2 <- ((data$Y * data$A) / (data$ps))
part3 <- -((predA1 * data$A) / data$ps)
part1A0 <- predA0
part2A0 <- ((data$Y * (1 - data$A)) / (1 - data$ps))
part3A0 <- -((predA0 * (1 - data$A)) / (1 - data$ps))
partdr1 <- mean(part1) - mean(part1A0)
partdr2 <- mean((data$Y * data$A) / (data$ps)) - mean((data$Y * (1 - data$A)) / (1 - data$ps))
partdr3 <- mean(-((predA1 * data$A) / data$ps)) - mean(-((predA0 * (1 - data$A)) / (1 - data$ps)))
# print("DR1")
# print(mean(DR0))
# print("Est1")
# print(mean(Estimator0))
mods <- t(c(outcome_formula,exposure_formula))
output <- as.data.frame(cbind(mods, mean(DR1) - mean(DR0), mean(Estimator1) - mean(Estimator0), outcome$coefficients[2], example_ipw$coefficients[2], partdr1, partdr2, partdr3))
names(output) <- c("Outcome Formula","Exposure Formula","Double Robust Causal Effect Estimate", "Double Robust Causal Effect Estimate 2", "Outcome Model Estimate", "IPW Estimate", "part1", "part2", "part3")
return(output)
}
accurate <- get_double_robust(data, Y ~ A + Z + W + M, A ~ Z + X)
WrongExposureX <- get_double_robust(data, Y ~ A + Z + W + M, A ~ X)
WrongExposureZ <- get_double_robust(data, Y ~ A + Z + W + M, A ~ Z)
VeryWrongExposure <- get_double_robust(data, Y ~ A + Z + W + M, A ~ 1)
WrongOutcome1 <- get_double_robust(data, Y ~ A + Z + W, A ~ Z + X)
WrongOutcome2 <- get_double_robust(data, Y ~ A + Z, A ~ Z + X)
WrongOutcome3 <- get_double_robust(data, Y ~ A, A ~ Z + X)
inaccurate <- get_double_robust(data, Y ~ A, A ~ X)
inaccurate2 <- get_double_robust(data, Y ~ A + M, A ~ 1)
print.data.frame(rbind(accurate, WrongExposureX, WrongExposureZ, VeryWrongExposure, WrongOutcome1, WrongOutcome2, WrongOutcome3, inaccurate, inaccurate2),
row.names = c("Accurate Models", "Inaccurate Exposure Model", "Inaccurate Exposure Model", "Very Inaccurate Exposure Model", "Inaccurate Outcome Model", "Inaccurate Outcome Model", "Very Inaccurate Outcome Model", "Inaccurate Models", "Inaccurate Models"))
get_dr_parts2_3 <- function(data, outcome_formula, exposure_formula) {
outcome <- lm(outcome_formula)
ps_model <- glm(exposure_formula, family = "binomial")
data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
mutate(ipw = case_when(
A == 1 ~ 1/ps,
A == 0 ~ 1/(1-ps)
))
example_ipw <- lm(Y ~ A, data = data, weights = ipw)
forceA0 <- data %>% mutate(A = 0)
forceA1 <- data %>% mutate(A = 1)
predA0 <- predict(outcome, newdata = forceA0)
predA1 <- predict(outcome, newdata = forceA1)
DR1 <-
(((    data$A) * data$Y) / (    data$ps)) -      # IPW part
((predA1 * (data$A - data$ps))) / (    data$ps)  # Other thing
DR0 <-
(((1 - data$A) * data$Y) / (1 - data$ps)) +      # IPW part
((predA0 * (data$A - data$ps))) / (1 - data$ps)  # Other thing
Estimator1 <- predA1 + ((data$Y * data$A) / (data$ps)) - ((predA1 * data$A) / data$ps)
Estimator0 <- predA0 + ((data$Y * (1 - data$A)) / (1 - data$ps)) - ((predA0 * (1 - data$A)) / (1 - data$ps))
part1 <- predA1
part2 <- ((data$Y * data$A) / (data$ps))
part3 <- -((predA1 * data$A) / data$ps)
mods <- t(c(outcome_formula,exposure_formula))
output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2], partdr1, partdr2, partdr3))
names(output) <- c("Outcome Formula","Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\frac{1}{n}\sum \frac{Y_i A_i}{\hat{e}(\textrm{covariates}_i)}$", "$\frac{1}{n}\sum \frac{\hat{y}(\textrm{covariates}_i)*A_i}{\hat{e}(\textrm{covariates}_i)}$")
kable(ace_estimates_1)
knitr::kable(ace_estimates_1)
get_dr_parts2_3 <- function(data, outcome_formula, exposure_formula) {
outcome <- lm(outcome_formula)
ps_model <- glm(exposure_formula, family = "binomial")
data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
mutate(ipw = case_when(
A == 1 ~ 1/ps,
A == 0 ~ 1/(1-ps)
))
example_ipw <- lm(Y ~ A, data = data, weights = ipw)
forceA0 <- data %>% mutate(A = 0)
forceA1 <- data %>% mutate(A = 1)
predA0 <- predict(outcome, newdata = forceA0)
predA1 <- predict(outcome, newdata = forceA1)
DR1 <-
(((    data$A) * data$Y) / (    data$ps)) -      # IPW part
((predA1 * (data$A - data$ps))) / (    data$ps)  # Other thing
DR0 <-
(((1 - data$A) * data$Y) / (1 - data$ps)) +      # IPW part
((predA0 * (data$A - data$ps))) / (1 - data$ps)  # Other thing
Estimator1 <- predA1 + ((data$Y * data$A) / (data$ps)) - ((predA1 * data$A) / data$ps)
Estimator0 <- predA0 + ((data$Y * (1 - data$A)) / (1 - data$ps)) - ((predA0 * (1 - data$A)) / (1 - data$ps))
part1 <- predA1
part2 <- ((data$Y * data$A) / (data$ps))
part3 <- -((predA1 * data$A) / data$ps)
mods <- t(c(outcome_formula,exposure_formula))
output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2], partdr1, partdr2, partdr3))
names(output) <- c("Outcome Formula","Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$A$", "$B$")
return(output)
}
get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X)
get_dr_parts2_3 <- function(data, outcome_formula, exposure_formula) {
outcome <- lm(outcome_formula)
ps_model <- glm(exposure_formula, family = "binomial")
data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
mutate(ipw = case_when(
A == 1 ~ 1/ps,
A == 0 ~ 1/(1-ps)
))
example_ipw <- lm(Y ~ A, data = data, weights = ipw)
forceA0 <- data %>% mutate(A = 0)
forceA1 <- data %>% mutate(A = 1)
predA0 <- predict(outcome, newdata = forceA0)
predA1 <- predict(outcome, newdata = forceA1)
DR1 <-
(((    data$A) * data$Y) / (    data$ps)) -      # IPW part
((predA1 * (data$A - data$ps))) / (    data$ps)  # Other thing
DR0 <-
(((1 - data$A) * data$Y) / (1 - data$ps)) +      # IPW part
((predA0 * (data$A - data$ps))) / (1 - data$ps)  # Other thing
Estimator1 <- predA1 + ((data$Y * data$A) / (data$ps)) - ((predA1 * data$A) / data$ps)
Estimator0 <- predA0 + ((data$Y * (1 - data$A)) / (1 - data$ps)) - ((predA0 * (1 - data$A)) / (1 - data$ps))
part1 <- predA1
part2 <- ((data$Y * data$A) / (data$ps))
part3 <- -((predA1 * data$A) / data$ps)
mods <- t(c(outcome_formula,exposure_formula))
output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2], part2, part3))
names(output) <- c("Outcome Formula","Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$B$", "$C$")
return(output)
}
get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X)
kable(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X))
knitr::kable(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X))
knitr::kable(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X), escape = FALSE)
knitr::kable(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X), escape = FALSE, col.names = c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\frac{1}{n}\sum \frac{Y_i A_i}{\hat{e}(\textrm{covariates}_i)} $", "C"))
knitr::kable(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X), escape = FALSE, col.names = c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "C"))
knitr::kable(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X), escape = TRUE, col.names = c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "C"))
knitr::kable(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X), escape = FALSE, format = "latex", col.names = c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "C"))
knitr::kable(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X), escape = FALSE, format = "latex", col.names = c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "B", "C"))
knitr::kable(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X), escape = FALSE, format = "latex", col.names = c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "B", "C", "E"))
knitr::kable(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X), escape = FALSE, format = "latex"))
knitr::kable(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X), escape = FALSE, format = "latex")
knitr::kable(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X), escape = FALSE)
knitr::kable(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X), escape = FALSEcol.names = c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "C"))
knitr::kable(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X), escape = FALSE, col.names = c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "C"))
knitr::kable(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X), escape = FALSE, col.names = c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum $", "C"))
knitr::kable(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X), escape = FALSE, col.names = c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum$", "C"))
library(lemon_print)
library(lemonprint)
library(lemon)
knit_print.data.frame <- lemon_print
```{r, render=lemon_print}
#| caption: "The Researcher's Puzzling Result"
ace_estimates_1 <- as.data.frame(t(get_normal_methods(data, Y ~ A + Z + W + M, A ~ X)))
colnames(ace_estimates_1) <- ""
knitr::kable(ace_estimates_1)
ace_estimates_1
knitr::kable(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X), escape = FALSE, col.names = c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum \\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)"))
knitr::kable(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X), escape = FALSE, col.names = c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum\\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)"))
knitr::kable(t(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X)), escape = FALSE, row.names = c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum \\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)}$")) #$\\frac{1}{n}\\sum\\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)
knitr::kable(t(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X)), escape = FALSE) #, row.names = c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum \\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)}$")) #$\\frac{1}{n}\\sum\\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)
knitr::kable(t(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X)), escape = FALSE, row.names = c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum \\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)}$"))
knitr::kable(t(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X)), escape = FALSE, row.names = c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum \\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)}$","A"))
knitr::kable(t(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X)), escape = FALSE, row.names = c("Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum \\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)}$"))
knitr::kable(t(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X)), escape = FALSE, col.names = c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum \\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)}$"))
row
knitr::kable(t(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X)), escape = FALSE, row.names = c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum \\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)}$"))
rownames(part_estimates_1) <- c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum \\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)}$")
part_estimates_1 <- t(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X))
rownames(part_estimates_1) <- c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum \\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)}$")
knitr::kable(part_estimates_1, escape = FALSE)
library(dplyr)
library(ggplot2)
library(dagitty)
library(ggdag)
library(lemon)
knit_print.data.frame <- lemon_print
n <- 100000
Z <- rnorm(n, 0, 1) # Z
W <- rbinom(n, 1, .5) # W
X <- rnorm(n, Z, 2)
log_odds_A <- .5 * Z + .5 * X
odds_A <- exp(log_odds_A)
p_A <- odds_A / (1 + odds_A)
A <- rbinom(n, 1, p_A) # A
M <- rnorm(n, 20 - 2, .5)
Y <- rnorm(n, A + W + 2 * Z + 0.05 * M, .25)
data <- data.frame(A = (A), Y = Y, Z = Z, M = M, W = (W), X = X)
get_normal_methods <- function(data, outcome_formula, exposure_formula) {
outcome <- lm(outcome_formula)
ps_model <- glm(exposure_formula, family = "binomial")
data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
mutate(ipw = case_when(
A == 1 ~ 1/ps,
A == 0 ~ 1/(1-ps)
))
example_ipw <- lm(Y ~ A, data = data, weights = ipw)
# print(summary(example_ipw)$coefficients)
# print(summary(outcome)$coefficients)
mods <- t(c(outcome_formula,exposure_formula))
output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2]))
names(output) <- c("Outcome Formula","Exposure Formula","Causal Effect Estimate from Outcome Model", "Causal Effect Estimate from Treatment Model")
return(output)
}
get_dr_parts2_3 <- function(data, outcome_formula, exposure_formula) {
outcome <- lm(outcome_formula)
ps_model <- glm(exposure_formula, family = "binomial")
data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
mutate(ipw = case_when(
A == 1 ~ 1/ps,
A == 0 ~ 1/(1-ps)
))
example_ipw <- lm(Y ~ A, data = data, weights = ipw)
forceA0 <- data %>% mutate(A = 0)
forceA1 <- data %>% mutate(A = 1)
predA0 <- predict(outcome, newdata = forceA0)
predA1 <- predict(outcome, newdata = forceA1)
DR1 <-
(((    data$A) * data$Y) / (    data$ps)) -      # IPW part
((predA1 * (data$A - data$ps))) / (    data$ps)  # Other thing
DR0 <-
(((1 - data$A) * data$Y) / (1 - data$ps)) +      # IPW part
((predA0 * (data$A - data$ps))) / (1 - data$ps)  # Other thing
Estimator1 <- predA1 + ((data$Y * data$A) / (data$ps)) - ((predA1 * data$A) / data$ps)
Estimator0 <- predA0 + ((data$Y * (1 - data$A)) / (1 - data$ps)) - ((predA0 * (1 - data$A)) / (1 - data$ps))
part1 <- predA1
part2 <- ((data$Y * data$A) / (data$ps))
part3 <- -((predA1 * data$A) / data$ps)
mods <- t(c(outcome_formula,exposure_formula))
output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2], part2, part3))
names(output) <- c("Outcome Formula","Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$B$", "$C$")
return(output)
}
#| fig-alt: "A causal graph with arrows from W, M, Z, and A to the outcome Y; an arrow from W to X; arrows from X and Z to A; and an arrow from A to M"
#| fig-cap: "Where Y is the outcome and A is a binary treatment. All relationships are linear."
dag <- dagitty('dag { bb="0,0,1,1"
A [exposure,pos="0.1,0.5"]
M [pos="0.5,0.4"]
W [pos="0.9,0.35"]
X [pos="0.1,0.35"]
Y [outcome,pos="0.9,0.5"]
Z [pos="0.5,0.6"]
A -> M
A -> Y
M -> Y
W -> X
W -> Y
X -> A
Z -> A
Z -> Y
}')
ggdag(dag)  +
theme_dag_blank() +
geom_dag_point(color = "lightblue1") +
geom_dag_text(color = "black")
#| caption: "The Researcher's Puzzling Result"
ace_estimates_1 <- as.data.frame(t(get_normal_methods(data, Y ~ A + Z + W + M, A ~ X)))
colnames(ace_estimates_1) <- ""
ace_estimates_1
part_estimates_1 <- t(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X))
rownames(part_estimates_1) <- c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum \\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)}$")
knitr::kable(part_estimates_1, escape = FALSE)
?knitr::kable
part_estimates_1 <- t(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X))
rownames(part_estimates_1) <- c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum \\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)}$")
knitr::kable(part_estimates_1, escape = FALSE, caption = "It does!")
get_dr_parts2_3 <- function(data, outcome_formula, exposure_formula) {
outcome <- lm(outcome_formula)
ps_model <- glm(exposure_formula, family = "binomial")
data <- data %>%
mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
mutate(ipw = case_when(
A == 1 ~ 1/ps,
A == 0 ~ 1/(1-ps)
))
example_ipw <- lm(Y ~ A, data = data, weights = ipw)
forceA0 <- data %>% mutate(A = 0)
forceA1 <- data %>% mutate(A = 1)
predA0 <- predict(outcome, newdata = forceA0)
predA1 <- predict(outcome, newdata = forceA1)
DR1 <-
(((    data$A) * data$Y) / (    data$ps)) -      # IPW part
((predA1 * (data$A - data$ps))) / (    data$ps)  # Other thing
DR0 <-
(((1 - data$A) * data$Y) / (1 - data$ps)) +      # IPW part
((predA0 * (data$A - data$ps))) / (1 - data$ps)  # Other thing
Estimator1 <- predA1 + ((data$Y * data$A) / (data$ps)) - ((predA1 * data$A) / data$ps)
Estimator0 <- predA0 + ((data$Y * (1 - data$A)) / (1 - data$ps)) - ((predA0 * (1 - data$A)) / (1 - data$ps))
part1 <- predA1
part2 <- ((data$Y * data$A) / (data$ps))
part3 <- -((predA1 * data$A) / data$ps)
mods <- t(c(outcome_formula,exposure_formula))
output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2], part2, -part3, part2+part3))
names(output) <- c("Outcome Formula","Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$B$", "$C$", "D")
return(output)
}
quarto::quarto_render()
quarto::quarto_render()
part_estimates_1 <- t(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X))
rownames(part_estimates_1) <- c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum \\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)}$","Difference")
knitr::kable(part_estimates_1, escape = FALSE, caption = "It does!", col.names = NULL)
