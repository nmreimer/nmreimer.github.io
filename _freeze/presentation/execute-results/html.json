{
  "hash": "5cdd08c7b7ffa2c07d2d912cf034f3e7",
  "result": {
    "markdown": "---\ntitle: Modeling Advection-Diffusion with Erosion and Depositon\ndate: '2023-12-16'\nformat:\n  revealjs:\n    theme: custom.scss\neditor: visual\nexecute:\n  freeze: auto\n  echo: false\n  warning: false\n  message: false\nbibliography: references.bib\n---\n\n## The Problem\n\nNitrogen Fertilizer $+$ Rain $\\implies$ Nitrogen Runoff\n\nNitrogen Runoff $\\implies$ Harmful Algae Blooms\n\nOther runoff is also terrible\n\n---\nnocite: |\n  @michaelbeman2005, @liu2020, @shao2023, @sun2020, @HAB2018\n---\n\n## Existing Models\n\n::: columns\n::: {.column width=\"50%\"}\n-   Equivalent exchange layer\n    -   Surface and soil exchange nutrients\n-   FADE (Fractional Advection Diffusion Equations)\n    -   Mobile-immobile model\n:::\n\n::: {.column width=\"45%\"}\n![](EEL.jpg)\n:::\n:::\n\n## A Potential Model\n\n-   Two values: Nitrogen in the soil $N$ and Nitrogen in the water $C$.\n-   $C$ obeys basic advection-diffusion.\n-   Transfers between $N$ and $C$ depend on $N$, $C$, velocity, and a parameter $n$.\n-   Velocity greater than $n$ $\\implies$ erosion\\*\n-   Velocity less than $n$ $\\implies$ deposition\\*\n\n## Model Equations\n\n::: columns\n::: {.column width=\"100%\"}\n\n```{=tex}\n\\begin{align}\nC_{t} = -(Cv)_{x} + kC_{xx} + N \\frac{e^{v-n}}{1 + e^{v-n}} - C\\frac{e^{n-v}}{1 + e^{n-v}}& \\\\\n\\\\\nN_{t} = - N \\frac{e^{v-n}}{1 + e^{v-n}} + C\\frac{e^{n-v}}{1 + e^{n-v}}&\n\\end{align}\n```\n\n:::\n:::\n\n## Assumptions\n\n-   Single erosion-deposition threshold\n    -   Real world better modeled with two thresholds(think static and dynamic friction)\n-   Advection does not vary with time\n-   Quantity of water ignored\n-   Impact of raindrops ignored\n-   Water only picks up nitrogen\n\n## Implementation in scikit-fdiff\n\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code code-line-numbers=\"4,5\"}\nbc = {(\"C\", \"x\"): (\"dirichlet\", \"dirichlet\"),\n      (\"N\", \"x\"): (\"dirichlet\", \"dirichlet\")}\n\nmodel = Model([\"-dx(C*v) + k*(dxxC) + N*e**(v-n)/(1+e**(v-n)) - C*e**(n-v)/(1+e**(n-v))\",\n           \"-N*e**(v-n)/(1+e**(v-n)) + C*e**(n-v)/(1+e**(n-v))\"],\n           [\"C(x)\", \"N(x)\"],\n           parameters=[\"v(x)\",\"k\",\"n\",\"e\"],\n           boundary_conditions = bc)\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code code-line-numbers=\"5,9,11\"}\nx = np.linspace(0, 10, 500)\n\nxx = np.meshgrid(x)\nC = 0\nN = np.exp(-(.25*(x-5)**2)/2)\nN[0] = 0\nN[-1] = 0\n\nv = 10 - 9.5*np.exp(-((x-8)**2)/2)\n\ninitial_fields = model.Fields(x=x, C=C, N=N, k=.1, v=v, n=5, e=2.7)\n\nsimulation = Simulation(model, initial_fields, dt=.1, tmax=20)\n```\n:::\n\n\n## Initial Condition\n\n::: {.cell execution_count=4}\n\n::: {.cell-output .cell-output-display}\n![](presentation_files/figure-revealjs/cell-5-output-1.png){width=808 height=449 fig-align='center'}\n:::\n:::\n\n\n## Output\n\n::: {.cell execution_count=5}\n\n::: {.cell-output .cell-output-display}\n![](presentation_files/figure-revealjs/cell-6-output-1.png){width=889 height=480 fig-align='center'}\n:::\n:::\n\n\n## Total Nitrogen\n\n\n\n::: {.cell fig-height='8' fig-width='8' execution_count=7}\n\n::: {.cell-output .cell-output-display}\n![](presentation_files/figure-revealjs/cell-8-output-1.png){width=808 height=449 fig-align='center'}\n:::\n:::\n\n\n## More Total Nitrogen\n\n\n\n::: {.cell fig-height='8' fig-width='8' execution_count=9}\n\n::: {.cell-output .cell-output-display}\n![](presentation_files/figure-revealjs/cell-10-output-1.png){width=789 height=449 fig-align='center'}\n:::\n:::\n\n\n## More Anomalous Solute Transport\n\n\n\n\n\n::: {.cell fig-width='8' execution_count=12}\n\n::: {.cell-output .cell-output-display}\n![](presentation_files/figure-revealjs/cell-13-output-1.png){width=808 height=429 fig-align='center'}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n",
    "supporting": [
      "presentation_files"
    ],
    "filters": [],
    "includes": {}
  }
}