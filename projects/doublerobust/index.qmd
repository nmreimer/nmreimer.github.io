---
title: "Doubly Robust Estimators"
description: "An Exploration of a Double Robust Estimator for Causal Inference. This paper was created as a final project for Stat 451: Causal Inference, taught by Leslie Myint."
date: "2023-04-17"
categories:
  - Statistics
  - Macalester
about:
  template: marquee
execute:
  freeze: auto
  echo: false
  warning: false
  message: false
---

```{r packages}
library(dplyr)
library(ggplot2)
library(dagitty)
library(ggdag)
library(knitr)
library(ggforce)
library(tidyr)


tabledigits <- 5
```

```{r simulate data}
set.seed(7)
n <- 100000
Z <- rnorm(n, 1, 2) # Z

W <- rbinom(n, 1, .5) # W

X <- rnorm(n, 2*W, 2) # X

M <- rnorm(n, 20, 1) # M

N <- rnorm(n, 10, 2) # N

log_odds_A <- .5 * Z + .5 * X - .1 * N
odds_A <- exp(log_odds_A)
p_A <- odds_A / (1 + odds_A)
A <- rbinom(n, 1, p_A) # A

Y <- rnorm(n, A + W + 2 * Z + 0.05 * M + rnorm(n, 2, 1), .25) # Y

data <- data.frame(A = (A), Y = Y, Z = Z, M = M, W = (W), X = X)
```

```{r normal methods function}
get_normal_methods <- function(data, outcome_formula, exposure_formula) {
  outcome <- lm(outcome_formula)
  ps_model <- glm(exposure_formula, family = "binomial")
  
  
  data <- data %>%
  mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
  mutate(ipw = case_when(
            A == 1 ~ 1/ps,
            A == 0 ~ 1/(1-ps)
        ))
  
  example_ipw <- lm(Y ~ A, data = data, weights = ipw)
  # print(summary(example_ipw)$coefficients)
  # print(summary(outcome)$coefficients)
  mods <- t(c(outcome_formula,exposure_formula))
  output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2]))
  names(output) <- c("Outcome Formula","Exposure Formula","Causal Effect Estimate from Outcome Model", "Causal Effect Estimate from Treatment Model")
  return(output)
}
```

```{r ignore this}
limit_check <- function(data, exposure_formula, bad_exposure_formula) {
  ps_model <- glm(exposure_formula, family = "binomial")
  bad_ps_model <- glm(bad_exposure_formula, family = "binomial")
  data <- data %>%
  mutate(bad_ps = predict(bad_ps_model, newdata = data, type = "response")) %>%
  mutate(good_ps = predict(ps_model, newdata = data, type = "response"))
  good <- c()
  bad <- c()
  j = 1
  for (i in seq(0, 100000, by = 100)
) {
    n[j] <- i
    good[j] <- mean(A[1:i]/data$good_ps[1:i])
    bad[j] <- mean(A[1:i]/data$bad_ps[1:i])
    j <- j + 1
  }
  
  data.frame(cbind(good, bad,n)) %>% pivot_longer(cols = c("good","bad")) %>% ggplot(aes(x=n,y=value,color=name)) + geom_path() + scale_y_continuous(limits = c(.98,1.02))
}

# limit_check(data, A ~ X + N + Z, A~ 1)
```

```{r get dr parts 2&3}
get_dr_parts2_3 <- function(data, outcome_formula, exposure_formula) {
  outcome <- lm(outcome_formula)
  ps_model <- glm(exposure_formula, family = "binomial")
  
  forceA0 <- data %>% mutate(A = 0)
  forceA1 <- data %>% mutate(A = 1)

  predA0 <- predict(outcome, newdata = forceA0)
  predA1 <- predict(outcome, newdata = forceA1)

  data <- data %>%
  mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
  mutate(ipw = case_when(
            A == 1 ~ 1/ps,
            A == 0 ~ 1/(1-ps)
        ))
  part1 <- predA1
  part2 <- ((data$Y * data$A) / (data$ps))
  part3 <- -((predA1 * data$A) / data$ps)


  example_ipw <- lm(Y ~ A, data = data, weights = ipw)

  mods <- t(c(outcome_formula,exposure_formula))
  output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2], mean(part2), mean(-part3), mean(part2+part3)))
  names(output) <- c("Outcome Formula","Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$B$", "$C$", "D")
  return(output)
}

```

```{r get dr part ABC}
get_dr_partC <- function(data, outcome_formula, exposure_formula) {
  outcome <- lm(outcome_formula)
  ps_model <- glm(exposure_formula, family = "binomial")
  
  forceA0 <- data %>% mutate(A = 0)
  forceA1 <- data %>% mutate(A = 1)

  predA0 <- predict(outcome, newdata = forceA0)
  predA1 <- predict(outcome, newdata = forceA1)

  data <- data %>%
  mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
  mutate(ipw = case_when(
            A == 1 ~ 1/ps,
            A == 0 ~ 1/(1-ps)
        ))

  partdrC <- mean(-((predA1 * data$A) / data$ps)) - mean(-((predA0 * (1 - data$A)) / (1 - data$ps)))
  example_ipw <- lm(Y ~ A, data = data, weights = ipw)

  mods <- t(c(outcome_formula,exposure_formula))
  output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2], -partdrC))
  names(output) <- c("Outcome Formula","Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "C")
  return(output)
}

get_dr_partB <- function(data, outcome_formula, exposure_formula) {
  outcome <- lm(outcome_formula)
  ps_model <- glm(exposure_formula, family = "binomial")
  
  forceA0 <- data %>% mutate(A = 0)
  forceA1 <- data %>% mutate(A = 1)

  predA0 <- predict(outcome, newdata = forceA0)
  predA1 <- predict(outcome, newdata = forceA1)

  data <- data %>%
  mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
  mutate(ipw = case_when(
            A == 1 ~ 1/ps,
            A == 0 ~ 1/(1-ps)
        ))

  partdrB <- mean((data$Y * data$A) / (data$ps)) - mean((data$Y * (1 - data$A)) / (1 - data$ps))
  example_ipw <- lm(Y ~ A, data = data, weights = ipw)

  mods <- t(c(outcome_formula,exposure_formula))
  output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2], partdrB))
  names(output) <- c("Outcome Formula","Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "B")
  return(output)
}

get_dr_partA <- function(data, outcome_formula, exposure_formula) {
  outcome <- lm(outcome_formula)
  ps_model <- glm(exposure_formula, family = "binomial")
  
  forceA0 <- data %>% mutate(A = 0)
  forceA1 <- data %>% mutate(A = 1)

  predA0 <- predict(outcome, newdata = forceA0)
  predA1 <- predict(outcome, newdata = forceA1)

  data <- data %>%
  mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
  mutate(ipw = case_when(
            A == 1 ~ 1/ps,
            A == 0 ~ 1/(1-ps)
        ))

  partdrA <- mean(predA1) - mean(predA0)
  example_ipw <- lm(Y ~ A, data = data, weights = ipw)

  mods <- t(c(outcome_formula,exposure_formula))
  output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2], partdrA))
  names(output) <- c("Outcome Formula","Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "A")
  return(output)
}

```

```{r get all dr parts}
get_dr_parts <- function(data, outcome_formula, exposure_formula) {
  outcome <- lm(outcome_formula)
  ps_model <- glm(exposure_formula, family = "binomial")


  data <- data %>%
  mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
  mutate(ipw = case_when(
            A == 1 ~ 1/ps,
            A == 0 ~ 1/(1-ps)
        ))

  example_ipw <- lm(Y ~ A, data = data, weights = ipw)

  forceA0 <- data %>% mutate(A = 0)
  forceA1 <- data %>% mutate(A = 1)

  predA0 <- predict(outcome, newdata = forceA0)
  predA1 <- predict(outcome, newdata = forceA1)

  DR1 <-
    (((    data$A) * data$Y) / (    data$ps)) -      # IPW part
    ((predA1 * (data$A - data$ps))) / (    data$ps)  # Other thing
  DR0 <-
    (((1 - data$A) * data$Y) / (1 - data$ps)) +      # IPW part
    ((predA0 * (data$A - data$ps))) / (1 - data$ps)  # Other thing

  Estimator1 <- predA1 + ((data$Y * data$A) / (data$ps)) - ((predA1 * data$A) / data$ps)
  Estimator0 <- predA0 + ((data$Y * (1 - data$A)) / (1 - data$ps)) - ((predA0 * (1 - data$A)) / (1 - data$ps))


  part1 <- predA1
  part2 <- ((data$Y * data$A) / (data$ps))
  part3 <- -((predA1 * data$A) / data$ps)
  
  part1A0 <- predA0
  part2A0 <- ((data$Y * (1 - data$A)) / (1 - data$ps))
  part3A0 <- -((predA0 * (1 - data$A)) / (1 - data$ps))
  
  partdr1 <- mean(part1) - mean(part1A0)
  partdr2 <- mean((data$Y * data$A) / (data$ps)) - mean((data$Y * (1 - data$A)) / (1 - data$ps))
  partdr3 <- mean(-((predA1 * data$A) / data$ps)) - mean(-((predA0 * (1 - data$A)) / (1 - data$ps)))

  mods <- t(c(outcome_formula,exposure_formula))
  output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2], partdr1, partdr2, partdr3, sum(partdr1, partdr2, partdr3)))
  
  names(output) <- c("Outcome Formula","Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$B$", "$C$", "D", "E")
  return(output)
}

```

### Doubly Robust Estimators

Doubly Robust estimation allows researchers to take advantage of both an outcome model and a model of treatment. If one or both of the models is correct, the doubly robust estimator will produce an accurate estimate of the causal effect. Here I'll focus on doubly robust estimation for a quantitative outcome and a binary treatment. Here is one such estimator:

```{=tex}
\begin{aligned}

&\frac{1}{n}\sum \left[ \hat{y}_1(\textrm{covariates}_i) + \frac{Y_i A_i}{\hat{e}(\textrm{covariates}_i)} - \frac{\hat{y}_1(\textrm{covariates}_i)*A_i}{\hat{e}(\textrm{covariates}_i)} \right] \\

-&\frac{1}{n}\sum \left[ \hat{y}_0(\textrm{covariates}_i) + \frac{Y_i(1 - A_i) }{1 - \hat{e}(\textrm{covariates}_i)} - \frac{\hat{y}_0(\textrm{covariates}_i)*(1 - A_i)}{1 - \hat{e}(\textrm{covariates}_i)} \right] \\

&\quad\quad\quad\quad\quad\quad (\textrm{A}) \quad\quad\quad\quad\quad\quad (\textrm{B}) \quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad (\textrm{C})


\end{aligned}
```
Or, alternatively:

```{=tex}
\begin{aligned}

(\textrm{A})  \hskip 2em &\frac{1}{n}\sum \left[ \hat{y}_1(\textrm{covariates}_i) - \hat{y}_0(\textrm{covariates}_i) \right]\\

\\

(\textrm{B}) \hskip 1.2em +&\frac{1}{n}\sum \left[ \frac{Y_i A_i}{\hat{e}(\textrm{covariates}_i)} - \frac{Y_i(1 - A_i) }{1 - \hat{e}(\textrm{covariates}_i)} \right]\\

\\


(\textrm{C}) \hskip 1.2em -&\frac{1}{n}\sum \left[\frac{\hat{y}_1(\textrm{covariates}_i)*A_i}{\hat{e}(\textrm{covariates}_i)} -  \frac{\hat{y}_0(\textrm{covariates}_i)*(1 - A_i)}{1 - \hat{e}(\textrm{covariates}_i)} \right] \\

\\

\end{aligned}
```
Where

-   $\hat{y}_1(\textrm{covariates}_i)$ are the predicted values for each individual $i$ with treatment $1$.

-   $\hat{y}_0(\textrm{covariates}_i)$ are the predicted values for each individual $i$ with treatment $0$.

-   $Y_i$ and $A_i$ are, respectively, the actual outcome and treatment values for each individual.

-   $\hat{e}(\textrm{covariates}_i)$ are the predicted propensity scores for each individual $i$.

The rest of this page will attempt to explain how the doubly robust property works in this estimator.

### Simulation

This is the causal diagram for our simulated data:

```{r daggity}
#| fig-alt: "A causal graph with arrows from W, M, Z, and A to the outcome Y; an arrow from W to X; arrows from X, Z, and N to A"
#| fig-cap: "Where Y is the outcome and A is a binary treatment. All relationships are linear."

dag <- dagitty('dag { bb="0,0,1,1"
A [exposure,pos="0.1,0.5"]
M [pos="0.6,0.4"]
N [pos="0.4,0.4"]
W [pos="0.9,0.35"]
X [pos="0.1,0.35"]
Y [outcome,pos="0.9,0.5"]
Z [pos="0.5,0.6"]
A -> Y
M -> Y
W -> X
W -> Y
X -> A
Z -> A
Z -> Y
N -> A
}')


ggdag(dag)  +
  theme_dag_blank() +
  geom_dag_point(color = "lightblue1") +
  geom_dag_text(color = "black")
  
```

### Part C: A Really Bad Estimator

Each of the three parts of the doubly robust estimator is itself an estimator.

$$
 (\textrm{C}) \quad\quad \frac{1}{n}\sum \frac{\hat{y}_1(\textrm{covariates}_i)*A_i}{\hat{e}(\textrm{covariates}_i)} - \frac{1}{n}\sum \frac{\hat{y}_0(\textrm{covariates}_i)*(1- A_i)}{1-\hat{e}(\textrm{covariates}_i)}
$$ This produces an accurate estimate when both the treatment and outcome models are correct. So, it is essentially the opposite of a doubly robust estimator. If either model is wrong the estimate will be incorrect.

```{r}
c_estimate1 <- as.data.frame(t(get_dr_partC(data, Y ~ A + W + M + Z, A ~ X + Z + N)))
c_estimate2 <- as.data.frame(t(get_dr_partC(data, Y ~ A + W + M + Z, A ~ N)))
c_estimate3 <- as.data.frame(t(get_dr_partC(data, Y ~ A            , A ~ X + Z + N)))
c_estimate4 <- as.data.frame(t(get_dr_partC(data, Y ~ A            , A ~ N)))

rownames(c_estimate1) <- c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "Part C")
c_estimates <- as.data.frame(cbind(c_estimate1, c_estimate2, c_estimate3, c_estimate4))
kable(c_estimates, escape = FALSE, caption = "", col.names = NULL, digits = tabledigits)
```

### Part B: Inverse Probability Weighting

An IPW estimator of the average causal effect is:

$$
(\textrm{B}) \quad\quad  \frac{1}{n}\sum \frac{Y_i A_i}{\hat{e}(\textrm{covariates}_i)}  - \frac{1}{n}\sum \frac{Y_i (1-A_i)}{1-\hat{e}(\textrm{covariates}_i)}
$$

Where $Y_i$ are the actual outcome values. If the treatment model is correct this will produce a correct estimate of average causal effect.

```{r}
b_estimate1 <- as.data.frame(t(get_dr_partB(data, Y ~ A + W + M + Z, A ~ X + Z + N)))
b_estimate2 <- as.data.frame(t(get_dr_partB(data, Y ~ A + W + M + Z, A ~ N)))
b_estimate3 <- as.data.frame(t(get_dr_partB(data, Y ~ A            , A ~ X + Z + N)))
b_estimate4 <- as.data.frame(t(get_dr_partB(data, Y ~ A            , A ~ N)))

rownames(b_estimate1) <- c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "Part B")
b_estimates <- as.data.frame(cbind(b_estimate1, b_estimate2, b_estimate3, b_estimate4))
kable(b_estimates, escape = FALSE, caption = "", col.names = NULL, digits = tabledigits)
```

#### Parts B and C cancel out when the outcome model is correct

Focus just on the first terms of B and C. Note that these terms pertain to the treated individuals: $A_i$ is either 1 or 0 so $Y_i A_i$ gives us the $Y_i$ values of the treated individuals.

$$
\frac{1}{n}\sum \frac{Y_i A_i}{\hat{e}(\textrm{covariates}_i)} - \frac{\hat{y}_1(\textrm{covariates}_i)*A_i}{\hat{e}(\textrm{covariates}_i)}
$$

$$
(\textrm{B}_1) - (\textrm{C}_1)
$$

We see that if we have a correct outcome model then $Y_i A_i = \hat{y}(\textrm{covariates}_i)* A_i$ and so the whole thing would reduce zero.

```{r}
part_estimates_1 <- as.data.frame(t(get_dr_parts2_3(data, Y ~ A + Z + W + M, A ~ X)))
rownames(part_estimates_1) <- c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum \\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)}$","Difference")
kable(part_estimates_1, escape = FALSE, caption = "It does!", col.names = NULL, digits = tabledigits)
```

If the outcome model were inaccurate then, $Y_i A_i \neq \hat{y}(\textrm{covariates}_i)* A_i$ and the whole thing does not reduce to zero. Instead of reducing to zero we might observe something like the first column:

```{r}
part_estimates_2 <- as.data.frame(t(get_dr_parts2_3(data, Y ~ A + X, A ~ X + Z + N)))
part_estimates_2_A <- as.data.frame(t(get_dr_parts2_3(data, Y ~ A, A ~ M)))
rownames(part_estimates_2) <- c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$\\frac{1}{n}\\sum \\frac{Y_i A_i}{\\hat{e}(\\textrm{covariates}_i)}$", "$\\frac{1}{n}\\sum \\frac{\\hat{y}(\\textrm{covariates}_i)*A_i}{\\hat{e}(\\textrm{covariates}_i)}$","Difference")
part_estimates_2 <- as.data.frame(cbind(part_estimates_2, part_estimates_2_A))
kable(part_estimates_2, escape = FALSE, caption = "", col.names = NULL, digits = tabledigits)
```

Note the second column, this is not actually a way to tell if the outcome model is correct.

Nevertheless, we now have two of the three parts of the doubly robust estimator.

### Part A: Outcome Regression

We just saw how two parts of the doubly robust estimator add together to equal zero when the outcome model is correct. In the full doubly robust estimator we also add:

$$
(\textrm{A}) \quad\quad  \frac{1}{n}\sum \hat{y}_1(\textrm{covariates}_i) - \hat{y}_0(\textrm{covariates}_i)
$$

Since the other parts are zero when the outcome model is correct, the doubly robust estimator produces an estimate of average causal effect based on just the above sum.

This estimator alone produces a correct estimate of average causal effect when the outcome model is correct.

```{r}
a_estimate1 <- as.data.frame(t(get_dr_partA(data, Y ~ A + W + M + Z, A ~ X + Z + N)))
a_estimate2 <- as.data.frame(t(get_dr_partA(data, Y ~ A + W + M + Z, A ~ N)))
a_estimate3 <- as.data.frame(t(get_dr_partA(data, Y ~ A            , A ~ X + Z + N)))
a_estimate4 <- as.data.frame(t(get_dr_partA(data, Y ~ A            , A ~ N)))

rownames(a_estimate1) <- c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "Part A")
a_estimates <- as.data.frame(cbind(a_estimate1, a_estimate2, a_estimate3, a_estimate4))
kable(a_estimates, escape = FALSE, caption = "", col.names = NULL, digits = tabledigits)
```

#### Putting everything together

So the full estimator is:

```{=tex}
\begin{aligned}

(\textrm{A})  \hskip 2em &\frac{1}{n}\sum \left[ \hat{y}_1(\textrm{covariates}_i) - \hat{y}_0(\textrm{covariates}_i) \right]\\

&\quad\quad \uparrow \textrm{Estimates correctly when the outcome model is correct} \\

\\

(\textrm{B}) \hskip 1.2em +&\frac{1}{n}\sum \left[ \frac{Y_i A_i}{\hat{e}(\textrm{covariates}_i)} - \frac{Y_i(1 - A_i) }{1 - \hat{e}(\textrm{covariates}_i)} \right]\\

&\quad\quad \uparrow \textrm{Estimates correctly when the treatment model is correct} \\

\\


(\textrm{C}) \hskip 1.2em -&\frac{1}{n}\sum \left[\frac{\hat{y}_1(\textrm{covariates}_i)*A_i}{\hat{e}(\textrm{covariates}_i)} -  \frac{\hat{y}_0(\textrm{covariates}_i)*(1 - A_i)}{1 - \hat{e}(\textrm{covariates}_i)} \right] \\

&\quad\quad \uparrow \textrm{Estimates correctly when both models are correct} \\

\\

\end{aligned}
```
Laid out like this, it is relatively simple to see how doubly robust estimation works. For example, if a researcher has an accurate exposure model and an inaccurate outcome model, $(\textrm{A})$ and $(\textrm{C})$ cancel each other out and we are left with just the accurate estimate based on the exposure model: $(\textrm{C})$. Take a little bit to think about the other possibilities yourself.

### Testing Doubly Robust Estimation

```{r}
accurate <- as.data.frame(t(get_dr_parts(data, Y ~ A + Z + W + M, A ~ Z + X + N)))
WrongExposureX <- as.data.frame(t(get_dr_parts(data, Y ~ A + Z + W + M, A ~ X + N)))
WrongExposureZ <- as.data.frame(t(get_dr_parts(data, Y ~ A + Z + W + M, A ~ Z)))
VeryWrongExposure <- as.data.frame(t(get_dr_parts(data, Y ~ A + Z + W + M, A ~ N*N + N)))

WrongOutcome1 <- as.data.frame(t(get_dr_parts(data, Y ~ A + N, A ~ Z + X + N)))
WrongOutcome2 <- as.data.frame(t(get_dr_parts(data, Y ~ A * Z + W, A ~ Z + X + N)))
WrongOutcome3 <- as.data.frame(t(get_dr_parts(data, Y ~ A, A ~ Z + X + N)))

inaccurate <- as.data.frame(t(get_dr_parts(data, Y ~ A, A ~ X)))
inaccurate2 <- as.data.frame(t(get_dr_parts(data, Y ~ A, A ~ M)))

rownames(accurate) <- c("Outcome Formula", "Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "A", "B","C","Doubly Robust Estimate")


kable(cbind(accurate, WrongExposureX, WrongExposureZ, VeryWrongExposure, inaccurate), 
      col.names = c("Accurate Models", "Inaccurate Exposure Model", "Inaccurate Exposure Model", "Very Inaccurate Exposure Model", "Inaccurate Models"),
      digits = tabledigits)
```

The real causal effect in our simulated data is 1. With inaccurate exposure models and an accurate outcome model we observe, just as we would expect, $(\textrm{B})$ and $(\textrm{C})$ cancel out and we are left with an estimate based on $(\textrm{A})$. When both models are inaccurate this does not happen.

```{r}
kable(cbind(accurate, WrongOutcome1, WrongOutcome2, WrongOutcome3, inaccurate, inaccurate2), 
      col.names = c("Accurate Models","Inaccurate Outcome Model", "Inaccurate Outcome Model", "Very Inaccurate Outcome Model", "Inaccurate Models", "Inaccurate Models"),
      digits = tabledigits)
```

When we have an accurate exposure and an inaccurate outcome model, $(\textrm{A})$ and $(\textrm{C})$ cancel out and we are left with an estimate based on $(\textrm{B})$.

## Sources {.appendix}

"Doubly Robust Estimation of Causal Effects" by Funk et al. and "A Falsifiability Characterization of Double Robustness Through Logical Operators" by Frangakis were used heavily in this project. My goal in this project was essentially to create an explanation of double robustness that combined Frangakis' logical framework with the more numerical and simulation-based approach of the Funk paper.

[Doubly Robust Estimation of Causal Effects](https://doi.org/10.1093/aje/kwq439)

[A Falsifiability Characterization of Double Robustness Through Logical Operators](https://www.degruyter.com/document/doi/10.1515/jci-2018-0016/html?lang=en)

## Code {.appendix}

### Simulating Data

```{r}
#| echo: true
#| eval: false
set.seed(7)
n <- 100000
Z <- rnorm(n, 1, 2) # Z

W <- rbinom(n, 1, .5) # W

X <- rnorm(n, 2*W, 2) # X

M <- rnorm(n, 20, 1) # M

N <- rnorm(n, 10, 2) # N

log_odds_A <- .25 * Z + .5 * X + .1 * N
odds_A <- exp(log_odds_A)
p_A <- odds_A / (1 + odds_A)
A <- rbinom(n, 1, p_A) # A



Y <- rnorm(n, A + W + 2 * Z + 0.05 * M + rnorm(n, 2, 1), .25) # Y

data <- data.frame(A = (A), Y = Y, Z = Z, M = M, W = (W), X = X)
```

### Function for Normal Methods

```{r}
#| echo: true
#| eval: false
get_normal_methods <- function(data, outcome_formula, exposure_formula) {
  outcome <- lm(outcome_formula)
  ps_model <- glm(exposure_formula, family = "binomial")
  
  
  data <- data %>%
  mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
  mutate(ipw = case_when(
            A == 1 ~ 1/ps,
            A == 0 ~ 1/(1-ps)
        ))
  
  example_ipw <- lm(Y ~ A, data = data, weights = ipw)
  # print(summary(example_ipw)$coefficients)
  # print(summary(outcome)$coefficients)
  mods <- t(c(outcome_formula,exposure_formula))
  output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2]))
  names(output) <- c("Outcome Formula","Exposure Formula","Causal Effect Estimate from Outcome Model", "Causal Effect Estimate from Treatment Model")
  return(output)
}
```

### Function for Two Parts of DR Estimator

```{r}
#| echo: true
#| eval: false
get_dr_parts2_3 <- function(data, outcome_formula, exposure_formula) {
  outcome <- lm(outcome_formula)
  ps_model <- glm(exposure_formula, family = "binomial")
  
  forceA0 <- data %>% mutate(A = 0)
  forceA1 <- data %>% mutate(A = 1)

  predA0 <- predict(outcome, newdata = forceA0)
  predA1 <- predict(outcome, newdata = forceA1)

  data <- data %>%
  mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
  mutate(ipw = case_when(
            A == 1 ~ 1/ps,
            A == 0 ~ 1/(1-ps)
        ))
  part1 <- predA1
  part2 <- ((data$Y * data$A) / (data$ps))
  part3 <- -((predA1 * data$A) / data$ps)


  example_ipw <- lm(Y ~ A, data = data, weights = ipw)

  mods <- t(c(outcome_formula,exposure_formula))
  output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2], mean(part2), mean(-part3), mean(part2+part3)))
  names(output) <- c("Outcome Formula","Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$B$", "$C$", "D")
  return(output)
}

```

### Function for All Parts of DR Estimator

```{r}
#| echo: true
#| eval: false
get_dr_parts <- function(data, outcome_formula, exposure_formula) {
  outcome <- lm(outcome_formula)
  ps_model <- glm(exposure_formula, family = "binomial")


  data <- data %>%
  mutate(ps = predict(ps_model, newdata = data, type = "response")) %>%
  mutate(ipw = case_when(
            A == 1 ~ 1/ps,
            A == 0 ~ 1/(1-ps)
        ))

  example_ipw <- lm(Y ~ A, data = data, weights = ipw)

  forceA0 <- data %>% mutate(A = 0)
  forceA1 <- data %>% mutate(A = 1)

  predA0 <- predict(outcome, newdata = forceA0)
  predA1 <- predict(outcome, newdata = forceA1)

  DR1 <-
    (((    data$A) * data$Y) / (    data$ps)) -      # IPW part
    ((predA1 * (data$A - data$ps))) / (    data$ps)  # Other thing
  DR0 <-
    (((1 - data$A) * data$Y) / (1 - data$ps)) +      # IPW part
    ((predA0 * (data$A - data$ps))) / (1 - data$ps)  # Other thing

  Estimator1 <- predA1 + ((data$Y * data$A) / (data$ps)) - ((predA1 * data$A) / data$ps)
  Estimator0 <- predA0 + ((data$Y * (1 - data$A)) / (1 - data$ps)) - ((predA0 * (1 - data$A)) / (1 - data$ps))


  part1 <- predA1
  part2 <- ((data$Y * data$A) / (data$ps))
  part3 <- -((predA1 * data$A) / data$ps)
  
  part1A0 <- predA0
  part2A0 <- ((data$Y * (1 - data$A)) / (1 - data$ps))
  part3A0 <- -((predA0 * (1 - data$A)) / (1 - data$ps))
  
  partdr1 <- mean(part1) - mean(part1A0)
  partdr2 <- mean((data$Y * data$A) / (data$ps)) - mean((data$Y * (1 - data$A)) / (1 - data$ps))
  partdr3 <- mean(-((predA1 * data$A) / data$ps)) - mean(-((predA0 * (1 - data$A)) / (1 - data$ps)))

  mods <- t(c(outcome_formula,exposure_formula))
  output <- as.data.frame(cbind(mods, outcome$coefficients[2], example_ipw$coefficients[2], partdr1, partdr2, partdr3, sum(partdr1, partdr2, partdr3)))
  
  names(output) <- c("Outcome Formula","Exposure Formula", "Outcome Model Estimate", "IPW Estimate", "$B$", "$C$", "D", "E")
  return(output)
}

```
