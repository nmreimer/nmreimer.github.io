---
title: "Beyond the Report Card: Investigating the Factors that Define Educational Achievement"
description: ""
author: "Thu Dang, Nathaniel Reimer, Jeremy Hubinger"
date: "2023-05-08"
date-modified: last-modified
format: html
editor: visual
execute: 
  echo: false
  warning: false
  message: false
---

```{r packages}
library(tidyverse)
library(MetBrewer)
library(sf)
library(rnaturalearth)
library(classInt) #install.packages('classInt')
library(ggspatial) #install.packages('ggspatial')
library(ggthemes) #install.packages('ggthemes')
library(RColorBrewer)
library(patchwork)
library(leaflet)
```

```{r color}
palname = "Homer2"
defaultcolor = met.brewer(palname,10)[9]
```

```{r load datasets}
load("../CombinedDataLongFormat.RData")
load("../WideMergedData.RData")
```

```{r maps load shapefile}
ca_counties <- read_sf('../CA_Counties')
ca_counties <- ca_counties %>%
  st_transform(crs = "NAD83")
```

```{r gcs map data cleaning}
school_map <- merged_table %>%
  select(CDSCode, School, gradecenter, gcs_mn_avg_ol, Longitude, Latitude) %>%
  filter(!is.na(gradecenter) & !is.na(gcs_mn_avg_ol)) %>% #7390 after NA gradecenter, 6997 after both conditions
  distinct %>%
  mutate(diff_from_gradecenter = gcs_mn_avg_ol - gradecenter) %>%
  mutate(gcs_type = ifelse(diff_from_gradecenter < 0, "Below NAEP Average", ifelse(diff_from_gradecenter > 0, "Above NAEP Average", "At NAEP Average")))

school_map_sf <- school_map %>% 
  st_as_sf(coords = c('Longitude', 'Latitude'), crs = "NAD83")

school_county_sf <- st_join(school_map_sf, ca_counties) 

grade_diff_by_county <- school_county_sf %>%
  st_drop_geometry() %>% #removes geometry - makes calculation more efficient 
  group_by(NAMELSAD) %>%
  summarise(mean_gcs_diff = mean(diff_from_gradecenter))

grade_diff_by_county_geo <- ca_counties %>%
  left_join(grade_diff_by_county, by="NAMELSAD")
```

```{r gcs map}
grade_diff_by_county_with_breaks_geo <- grade_diff_by_county_geo %>%
  mutate(grade_diff_cat = factor(cut(mean_gcs_diff, breaks=c(-2, -1, 0, 1, 2))))

pal <- colorFactor(
  palette = met.brewer(palname,3)[1:3],
  domain = grade_diff_by_county_with_breaks_geo$grade_diff_cat
)

leaflet(grade_diff_by_county_with_breaks_geo) %>%
  addPolygons(
    fillColor = ~pal(grade_diff_cat),
    opacity = .25,
    color = "white",
    fillOpacity = .5,
    group = "County"
  )  %>% 
  addProviderTiles(providers$CartoDB.Positron) %>%
    addLayersControl(
    baseGroups = "County",
    position = "topright"

  ) %>%
  addLegend(colors = met.brewer(palname,3)[1:3], values = ~grade_diff_cat, title = NULL, labels = c('1-2 grades lower than national average', 'Less than 1 grade lower than average', '0-1 grade higher than national average'), className = "info legend County")

```

```{r metric performance and funding}
#| warning: false
#| message: false
min_max_norm <- function(x) {
    (x - min(x, na.rm=TRUE)) / (max(x, na.rm=TRUE) - min(x, na.rm=TRUE))
}

# model metrics by per pupil funding
grouped_merged_table <- merged_table %>%
  filter(flag_nerds == 'false' || is.na(flag_nerds)) %>%
  filter(flag_f33 != '1' || is.na(flag_f33)) %>%
  mutate(pp_total_raw = as.numeric(pp_total_raw))%>%
  filter(pp_total_raw < 100000) %>% #filters 1 school out
  # mutate to then as.numeric
  mutate(
      science_data_Earth.and.Space.Sciences.Domain.Percent.Above.Standard = as.numeric(science_data_Earth.and.Space.Sciences.Domain.Percent.Above.Standard),
      science_data_Physical.Sciences.Domain.Percent.Above.Standard = as.numeric(science_data_Physical.Sciences.Domain.Percent.Above.Standard),
      science_data_Life.Sciences.Domain.Percent.Above.Standard = as.numeric(science_data_Life.Sciences.Domain.Percent.Above.Standard),
      ela_data_currstatus = as.numeric(ela_data_currstatus),
      gcs_mn_avg_ol = as.numeric(gcs_mn_avg_ol)
  ) %>%
  mutate(ela_data_currstatus = ela_data_currstatus * ela_data_currdenom) %>%
  group_by(CDSCode, pp_total_raw, Latitude, Longitude) %>%
  summarise(
    science_data_Earth.and.Space.Sciences.Domain.Percent.Above.Standard = mean(science_data_Earth.and.Space.Sciences.Domain.Percent.Above.Standard, na.rm = TRUE),
    science_data_Physical.Sciences.Domain.Percent.Above.Standard = mean(science_data_Physical.Sciences.Domain.Percent.Above.Standard, na.rm = TRUE),
    science_data_Life.Sciences.Domain.Percent.Above.Standard = mean(science_data_Life.Sciences.Domain.Percent.Above.Standard, na.rm = TRUE),
    ela_data_currstatus = mean(ela_data_currstatus, na.rm = TRUE),
    gcs_mn_avg_ol = mean(gcs_mn_avg_ol, na.rm = TRUE),
  ) %>%
  ungroup()

graph_ready <- grouped_merged_table %>%
  na.omit() %>% #only looking at the same schools. this line is doing a lot though
  filter(pp_total_raw < 20000) %>% # removes 2 schools
  # normalize the metrics
    mutate(
        science_data_Earth.and.Space.Sciences.Domain.Percent.Above.Standard = min_max_norm(science_data_Earth.and.Space.Sciences.Domain.Percent.Above.Standard),
        science_data_Physical.Sciences.Domain.Percent.Above.Standard = min_max_norm(science_data_Physical.Sciences.Domain.Percent.Above.Standard),
        science_data_Life.Sciences.Domain.Percent.Above.Standard = min_max_norm(science_data_Life.Sciences.Domain.Percent.Above.Standard),
        ela_data_currstatus = min_max_norm(ela_data_currstatus),
        gcs_mn_avg_ol = min_max_norm(gcs_mn_avg_ol)
    ) %>%
  group_by(CDSCode) %>%
  pivot_longer(cols=c(science_data_Earth.and.Space.Sciences.Domain.Percent.Above.Standard,science_data_Physical.Sciences.Domain.Percent.Above.Standard,science_data_Life.Sciences.Domain.Percent.Above.Standard,ela_data_currstatus,gcs_mn_avg_ol))
fl <- c("English Language Arts", "Grade Cohort Standardized", "Earth + Space", "Life Sciences", "Physical Sciences")
names(fl) <- c("ela_data_currstatus", "gcs_mn_avg_ol", "science_data_Earth.and.Space.Sciences.Domain.Percent.Above.Standard", "science_data_Life.Sciences.Domain.Percent.Above.Standard", "science_data_Physical.Sciences.Domain.Percent.Above.Standard")
graph_ready %>%
  ggplot(aes(x = pp_total_raw, y = value)) +
  geom_point(alpha=0.3,color = defaultcolor)+
  facet_wrap(~name, labeller=labeller(name=fl))+
  geom_smooth(color = defaultcolor)+
  labs(x = "Per Pupil Funding", y = "Normalized Metric", title = "Metric Performance by Total Per-Pupil Funding") +
  theme_minimal() +
  theme(
    legend.title = element_blank(),
    legend.text = element_text(size = 8),
    legend.position = "none")
```

```{r funding/performance map}
mapdata <- wide_merged_data %>% filter(!is.na(gradecenter)&!is.na(gcs_mn_avg_ol)) %>% 
  mutate(diff_from_gradecenter = gcs_mn_avg_ol - gradecenter, pp_total_raw = as.numeric(pp_total_raw)) %>%
  mutate(Longitude = as.numeric(Longitude), Latitude = as.numeric(Latitude))

p1 <- colorNumeric(
  palette = met.brewer(palname, 10)[1:10],
  domain = mapdata$diff_from_gradecenter
)

pal <- colorNumeric(
  palette = met.brewer(palname, 10)[1:10],
  domain = c(8000,24000)
)

leaflet(mapdata) %>% addProviderTiles(providers$CartoDB.Positron) %>% 
  addCircleMarkers(
    color = ~pal(scales::oob_squish(pp_total_raw, range = c(8000,24000))),
    radius = ~(as.numeric(ncesenroll)/400),
    popup = ~paste0(School, 
                    "<br>Grade Distance from National Average: ", round(diff_from_gradecenter, digits = 3),
                    "<br>Per Pupil Funding: ", pp_total_raw
    ),
    stroke = ~ifelse(!is.na(pp_total_raw), TRUE, FALSE),
    group = "Funding"
  ) %>%
  addLegend(pal = pal, values = 8000:24000, group = "Funding", className = "info legend Funding") %>%
  addCircleMarkers(
    color = ~p1(diff_from_gradecenter),
    radius = ~(as.numeric(ncesenroll)/400),
    popup = ~paste0(School, 
                    "<br>Grade Distance from National Average: ", round(diff_from_gradecenter, digits = 3),
                    "<br>Per Pupil Funding: ", pp_total_raw
    ),
    group = "Performance"
  ) %>% 
  addLegend(pal = p1, values = 6:-6, group = "Performance", className = "info legend Performance") %>%
  addLayersControl(
    baseGroups = c("Funding", "Performance"),
    position = "topleft"

  ) %>%
  htmlwidgets::onRender("
      function(el, x) {
         var updateLegend = function () {
            var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);

            document.querySelectorAll('.legend').forEach(a => a.hidden=true);
            document.querySelectorAll('.legend').forEach(l => {
               if (l.classList.contains(selectedGroup)) l.hidden=false;
            });
         };
         updateLegend();
         this.on('baselayerchange', el => updateLegend());
      }"
   ) # JS from https://gis.stackexchange.com/questions/342090/cannot-bind-legend-layer-to-polygon-layer-in-leaflet-r


```

```{r funding and performance by area}
wide_merged_data %>% filter(!is.na(urbanicity)) %>%
  ggplot(aes(x=as.numeric(pp_total_raw), y=(as.numeric(gcs_mn_avg_ol)-as.numeric(gradecenter)))) +
  geom_point(alpha = .1, color=defaultcolor) + 
  geom_smooth(method = lm, color=defaultcolor) + 
  facet_wrap(~urbanicity) + 
  scale_x_continuous(limits = c(8000,18000)) + 
  theme_minimal()+
  labs(y="Grade Cohort Score", x= "Per Student Spending") + guides(color="none") +   geom_hline(yintercept = 0)
```

```{r funding model}
#| message: true
fundingmod<-wide_merged_data %>% 
  filter(!is.na(pp_total_raw)&!is.na(perfrl)) %>% 
  lm(formula = as.numeric(pp_total_raw) ~ as.numeric(perfrl) + 
       as.numeric(lep_flag) + 
       as.numeric(perfrl)*as.numeric(lep_flag)) %>%
  summary()

lunchfundingmod<-wide_merged_data %>% 
  filter(!is.na(pp_total_raw)&!is.na(perfrl)) %>% 
  lm(formula = as.numeric(pp_total_raw) ~ as.numeric(perfrl)) %>%
  summary()

# fundingmod$coefficients
lunchfundingmod$coefficients
```

```{r adjusted graphs}
fl<-c("Adjusted Spending","Raw Spending")

wide_merged_data %>%
  mutate(pp_total_raw_frl_adjusted = as.numeric(pp_total_raw) - as.numeric(perfrl)*lunchfundingmod$coefficients[2],
  pp_total_raw = as.numeric(pp_total_raw)) %>%
  pivot_longer(cols = c(pp_total_raw_frl_adjusted,pp_total_raw)) %>%
  ggplot(aes(x=value, y=gcs_mn_avg_ol-gradecenter, color = name)) + 
    geom_point(alpha = .1)+
    geom_smooth() +
    geom_hline(yintercept = 0, alpha=.5) + 
    scale_x_continuous(limits = c(8000,18000)) +
    scale_y_continuous(limits = c(-4, 4)) +
    scale_color_discrete(type = met.brewer(palname, 3)[2:3], labels = c("Raw Spending", "Adjusted Spending")) + 
    labs(x = "Per Student Funding", y = "Grade Cohort Score", color="") + 
    theme_minimal() + 
    theme(legend.position = c(.8,.81))

wide_merged_data %>%
  mutate(pp_total_raw_frl_adjusted = as.numeric(pp_total_raw) - as.numeric(perfrl)*lunchfundingmod$coefficients[2],
  pp_total_raw = as.numeric(pp_total_raw)) %>%
  pivot_longer(cols = c(pp_total_raw_frl_adjusted,pp_total_raw)) %>%
 ggplot(aes(x=as.numeric(perhsp),value,color=name)) +
      geom_point(alpha = .05) +
      geom_smooth() + 
      theme_minimal()+
      theme(legend.position = c(.2,.9) ) + 
      labs(x="Percent Hispanic", y="Per student funding", color="")+
      scale_y_continuous(limits = c(5000,20000)) +
      scale_color_discrete(type = met.brewer(palname, 3)[2:3], labels = c("Raw Spending", "Adjusted Spending"))
```

```{r area adjusted graph}
wide_merged_data %>% filter(!is.na(urbanicity)) %>% mutate(pp_total_raw_frl_adjusted = as.numeric(pp_total_raw) - as.numeric(perfrl)*lunchfundingmod$coefficients[2],
  pp_total_raw = as.numeric(pp_total_raw)) %>%
  ggplot(aes(x=as.numeric(pp_total_raw_frl_adjusted), y=(as.numeric(gcs_mn_avg_ol)-as.numeric(gradecenter)))) +
  geom_point(alpha = .1, color=defaultcolor) + 
  geom_smooth(method = lm, color=defaultcolor) + 
  facet_wrap(~urbanicity) + 
  scale_x_continuous(limits = c(8000,18000)) + 
  theme_minimal()+
  labs(y="Grade Cohort Score", x= "Adjusted Per Student Spending") + guides(color="none") +   geom_hline(yintercept = 0)
```
